// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/example/example_parser_configuration.proto

package example

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow "github.com/Applifier/go-tensorflow/types/tensorflow/core/framework"
import tensorflow3 "github.com/Applifier/go-tensorflow/types/tensorflow/core/framework"
import tensorflow2 "github.com/Applifier/go-tensorflow/types/tensorflow/core/framework"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VarLenFeatureProto struct {
	Dtype                   tensorflow2.DataType `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	ValuesOutputTensorName  string               `protobuf:"bytes,2,opt,name=values_output_tensor_name,json=valuesOutputTensorName,proto3" json:"values_output_tensor_name,omitempty"`
	IndicesOutputTensorName string               `protobuf:"bytes,3,opt,name=indices_output_tensor_name,json=indicesOutputTensorName,proto3" json:"indices_output_tensor_name,omitempty"`
	ShapesOutputTensorName  string               `protobuf:"bytes,4,opt,name=shapes_output_tensor_name,json=shapesOutputTensorName,proto3" json:"shapes_output_tensor_name,omitempty"`
}

func (m *VarLenFeatureProto) Reset()         { *m = VarLenFeatureProto{} }
func (m *VarLenFeatureProto) String() string { return proto.CompactTextString(m) }
func (*VarLenFeatureProto) ProtoMessage()    {}
func (*VarLenFeatureProto) Descriptor() ([]byte, []int) {
	return fileDescriptorExampleParserConfiguration, []int{0}
}

func (m *VarLenFeatureProto) GetDtype() tensorflow2.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow2.DataType_DT_INVALID
}

func (m *VarLenFeatureProto) GetValuesOutputTensorName() string {
	if m != nil {
		return m.ValuesOutputTensorName
	}
	return ""
}

func (m *VarLenFeatureProto) GetIndicesOutputTensorName() string {
	if m != nil {
		return m.IndicesOutputTensorName
	}
	return ""
}

func (m *VarLenFeatureProto) GetShapesOutputTensorName() string {
	if m != nil {
		return m.ShapesOutputTensorName
	}
	return ""
}

type FixedLenFeatureProto struct {
	Dtype                  tensorflow2.DataType         `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape                  *tensorflow.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	DefaultValue           *tensorflow3.TensorProto     `protobuf:"bytes,3,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	ValuesOutputTensorName string                       `protobuf:"bytes,4,opt,name=values_output_tensor_name,json=valuesOutputTensorName,proto3" json:"values_output_tensor_name,omitempty"`
}

func (m *FixedLenFeatureProto) Reset()         { *m = FixedLenFeatureProto{} }
func (m *FixedLenFeatureProto) String() string { return proto.CompactTextString(m) }
func (*FixedLenFeatureProto) ProtoMessage()    {}
func (*FixedLenFeatureProto) Descriptor() ([]byte, []int) {
	return fileDescriptorExampleParserConfiguration, []int{1}
}

func (m *FixedLenFeatureProto) GetDtype() tensorflow2.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow2.DataType_DT_INVALID
}

func (m *FixedLenFeatureProto) GetShape() *tensorflow.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *FixedLenFeatureProto) GetDefaultValue() *tensorflow3.TensorProto {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *FixedLenFeatureProto) GetValuesOutputTensorName() string {
	if m != nil {
		return m.ValuesOutputTensorName
	}
	return ""
}

type FeatureConfiguration struct {
	// Types that are valid to be assigned to Config:
	//	*FeatureConfiguration_FixedLenFeature
	//	*FeatureConfiguration_VarLenFeature
	Config isFeatureConfiguration_Config `protobuf_oneof:"config"`
}

func (m *FeatureConfiguration) Reset()         { *m = FeatureConfiguration{} }
func (m *FeatureConfiguration) String() string { return proto.CompactTextString(m) }
func (*FeatureConfiguration) ProtoMessage()    {}
func (*FeatureConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorExampleParserConfiguration, []int{2}
}

type isFeatureConfiguration_Config interface {
	isFeatureConfiguration_Config()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FeatureConfiguration_FixedLenFeature struct {
	FixedLenFeature *FixedLenFeatureProto `protobuf:"bytes,1,opt,name=fixed_len_feature,json=fixedLenFeature,oneof"`
}
type FeatureConfiguration_VarLenFeature struct {
	VarLenFeature *VarLenFeatureProto `protobuf:"bytes,2,opt,name=var_len_feature,json=varLenFeature,oneof"`
}

func (*FeatureConfiguration_FixedLenFeature) isFeatureConfiguration_Config() {}
func (*FeatureConfiguration_VarLenFeature) isFeatureConfiguration_Config()   {}

func (m *FeatureConfiguration) GetConfig() isFeatureConfiguration_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FeatureConfiguration) GetFixedLenFeature() *FixedLenFeatureProto {
	if x, ok := m.GetConfig().(*FeatureConfiguration_FixedLenFeature); ok {
		return x.FixedLenFeature
	}
	return nil
}

func (m *FeatureConfiguration) GetVarLenFeature() *VarLenFeatureProto {
	if x, ok := m.GetConfig().(*FeatureConfiguration_VarLenFeature); ok {
		return x.VarLenFeature
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FeatureConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FeatureConfiguration_OneofMarshaler, _FeatureConfiguration_OneofUnmarshaler, _FeatureConfiguration_OneofSizer, []interface{}{
		(*FeatureConfiguration_FixedLenFeature)(nil),
		(*FeatureConfiguration_VarLenFeature)(nil),
	}
}

func _FeatureConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FeatureConfiguration)
	// config
	switch x := m.Config.(type) {
	case *FeatureConfiguration_FixedLenFeature:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedLenFeature); err != nil {
			return err
		}
	case *FeatureConfiguration_VarLenFeature:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VarLenFeature); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FeatureConfiguration.Config has unexpected type %T", x)
	}
	return nil
}

func _FeatureConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FeatureConfiguration)
	switch tag {
	case 1: // config.fixed_len_feature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FixedLenFeatureProto)
		err := b.DecodeMessage(msg)
		m.Config = &FeatureConfiguration_FixedLenFeature{msg}
		return true, err
	case 2: // config.var_len_feature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VarLenFeatureProto)
		err := b.DecodeMessage(msg)
		m.Config = &FeatureConfiguration_VarLenFeature{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FeatureConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FeatureConfiguration)
	// config
	switch x := m.Config.(type) {
	case *FeatureConfiguration_FixedLenFeature:
		s := proto.Size(x.FixedLenFeature)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FeatureConfiguration_VarLenFeature:
		s := proto.Size(x.VarLenFeature)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExampleParserConfiguration struct {
	FeatureMap map[string]*FeatureConfiguration `protobuf:"bytes,1,rep,name=feature_map,json=featureMap" json:"feature_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ExampleParserConfiguration) Reset()         { *m = ExampleParserConfiguration{} }
func (m *ExampleParserConfiguration) String() string { return proto.CompactTextString(m) }
func (*ExampleParserConfiguration) ProtoMessage()    {}
func (*ExampleParserConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorExampleParserConfiguration, []int{3}
}

func (m *ExampleParserConfiguration) GetFeatureMap() map[string]*FeatureConfiguration {
	if m != nil {
		return m.FeatureMap
	}
	return nil
}

func init() {
	proto.RegisterType((*VarLenFeatureProto)(nil), "tensorflow.VarLenFeatureProto")
	proto.RegisterType((*FixedLenFeatureProto)(nil), "tensorflow.FixedLenFeatureProto")
	proto.RegisterType((*FeatureConfiguration)(nil), "tensorflow.FeatureConfiguration")
	proto.RegisterType((*ExampleParserConfiguration)(nil), "tensorflow.ExampleParserConfiguration")
}
func (m *VarLenFeatureProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VarLenFeatureProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.Dtype))
	}
	if len(m.ValuesOutputTensorName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(len(m.ValuesOutputTensorName)))
		i += copy(dAtA[i:], m.ValuesOutputTensorName)
	}
	if len(m.IndicesOutputTensorName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(len(m.IndicesOutputTensorName)))
		i += copy(dAtA[i:], m.IndicesOutputTensorName)
	}
	if len(m.ShapesOutputTensorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(len(m.ShapesOutputTensorName)))
		i += copy(dAtA[i:], m.ShapesOutputTensorName)
	}
	return i, nil
}

func (m *FixedLenFeatureProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedLenFeatureProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.Dtype))
	}
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.Shape.Size()))
		n1, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DefaultValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.DefaultValue.Size()))
		n2, err := m.DefaultValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ValuesOutputTensorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(len(m.ValuesOutputTensorName)))
		i += copy(dAtA[i:], m.ValuesOutputTensorName)
	}
	return i, nil
}

func (m *FeatureConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		nn3, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *FeatureConfiguration_FixedLenFeature) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FixedLenFeature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.FixedLenFeature.Size()))
		n4, err := m.FixedLenFeature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *FeatureConfiguration_VarLenFeature) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VarLenFeature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(m.VarLenFeature.Size()))
		n5, err := m.VarLenFeature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ExampleParserConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleParserConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FeatureMap) > 0 {
		for k, _ := range m.FeatureMap {
			dAtA[i] = 0xa
			i++
			v := m.FeatureMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovExampleParserConfiguration(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovExampleParserConfiguration(uint64(len(k))) + msgSize
			i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintExampleParserConfiguration(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func encodeVarintExampleParserConfiguration(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VarLenFeatureProto) Size() (n int) {
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovExampleParserConfiguration(uint64(m.Dtype))
	}
	l = len(m.ValuesOutputTensorName)
	if l > 0 {
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	l = len(m.IndicesOutputTensorName)
	if l > 0 {
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	l = len(m.ShapesOutputTensorName)
	if l > 0 {
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	return n
}

func (m *FixedLenFeatureProto) Size() (n int) {
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovExampleParserConfiguration(uint64(m.Dtype))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	l = len(m.ValuesOutputTensorName)
	if l > 0 {
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	return n
}

func (m *FeatureConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *FeatureConfiguration_FixedLenFeature) Size() (n int) {
	var l int
	_ = l
	if m.FixedLenFeature != nil {
		l = m.FixedLenFeature.Size()
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	return n
}
func (m *FeatureConfiguration_VarLenFeature) Size() (n int) {
	var l int
	_ = l
	if m.VarLenFeature != nil {
		l = m.VarLenFeature.Size()
		n += 1 + l + sovExampleParserConfiguration(uint64(l))
	}
	return n
}
func (m *ExampleParserConfiguration) Size() (n int) {
	var l int
	_ = l
	if len(m.FeatureMap) > 0 {
		for k, v := range m.FeatureMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExampleParserConfiguration(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExampleParserConfiguration(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExampleParserConfiguration(uint64(mapEntrySize))
		}
	}
	return n
}

func sovExampleParserConfiguration(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExampleParserConfiguration(x uint64) (n int) {
	return sovExampleParserConfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VarLenFeatureProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleParserConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VarLenFeatureProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VarLenFeatureProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow2.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesOutputTensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesOutputTensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndicesOutputTensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndicesOutputTensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapesOutputTensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShapesOutputTensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleParserConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedLenFeatureProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleParserConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedLenFeatureProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedLenFeatureProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow2.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &tensorflow.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &tensorflow3.TensorProto{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesOutputTensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesOutputTensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleParserConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleParserConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedLenFeature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FixedLenFeatureProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &FeatureConfiguration_FixedLenFeature{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarLenFeature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VarLenFeatureProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &FeatureConfiguration_VarLenFeature{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleParserConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExampleParserConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleParserConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleParserConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleParserConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureMap == nil {
				m.FeatureMap = make(map[string]*FeatureConfiguration)
			}
			var mapkey string
			var mapvalue *FeatureConfiguration
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExampleParserConfiguration
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExampleParserConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExampleParserConfiguration
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExampleParserConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExampleParserConfiguration
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthExampleParserConfiguration
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FeatureConfiguration{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExampleParserConfiguration(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthExampleParserConfiguration
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FeatureMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleParserConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleParserConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExampleParserConfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExampleParserConfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleParserConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExampleParserConfiguration
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExampleParserConfiguration
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExampleParserConfiguration(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExampleParserConfiguration = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExampleParserConfiguration   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tensorflow/core/example/example_parser_configuration.proto", fileDescriptorExampleParserConfiguration)
}

var fileDescriptorExampleParserConfiguration = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0xeb, 0x76, 0x9d, 0xfe, 0x7b, 0xfb, 0x1f, 0x85, 0x68, 0xda, 0xba, 0x0a, 0x55, 0x51,
	0x25, 0x50, 0x85, 0x20, 0x91, 0x82, 0x34, 0xb1, 0xc1, 0x01, 0x0a, 0x9b, 0x7a, 0x80, 0x51, 0x85,
	0x69, 0x48, 0x5c, 0x2c, 0xaf, 0x75, 0xba, 0x68, 0x49, 0x6c, 0x39, 0x4e, 0xb7, 0x7e, 0x0b, 0xf8,
	0x3a, 0x7c, 0x02, 0x8e, 0x9c, 0x38, 0xa3, 0xf2, 0x01, 0x38, 0x70, 0xe1, 0x88, 0x62, 0x47, 0x5b,
	0xda, 0xa6, 0xe5, 0xc0, 0xa9, 0x95, 0xdf, 0xdf, 0xf3, 0xbe, 0x7e, 0x9e, 0xd8, 0x86, 0x03, 0x49,
	0xa3, 0x98, 0x09, 0x2f, 0x60, 0x97, 0xf6, 0x80, 0x09, 0x6a, 0xd3, 0x2b, 0x12, 0xf2, 0xe0, 0xfa,
	0x17, 0x73, 0x22, 0x62, 0x2a, 0xf0, 0x80, 0x45, 0x9e, 0x3f, 0x4a, 0x04, 0x91, 0x3e, 0x8b, 0x2c,
	0x2e, 0x98, 0x64, 0x06, 0xdc, 0x68, 0x9b, 0x0f, 0xe7, 0xfb, 0x78, 0x82, 0x84, 0xf4, 0x92, 0x89,
	0x0b, 0x5b, 0x57, 0x70, 0x7c, 0x4e, 0x38, 0xd5, 0xca, 0xe6, 0xfd, 0xbf, 0xd1, 0x19, 0x77, 0x6f,
	0x05, 0x37, 0xe1, 0x34, 0xd6, 0x58, 0xfb, 0x17, 0x02, 0xe3, 0x94, 0x88, 0xd7, 0x34, 0x3a, 0xa2,
	0x44, 0x26, 0x82, 0xf6, 0xd5, 0xfe, 0x1e, 0x40, 0x75, 0x98, 0x62, 0x0d, 0x64, 0xa2, 0xce, 0x2d,
	0x67, 0xcb, 0xba, 0xe9, 0x66, 0xbd, 0x22, 0x92, 0x9c, 0x4c, 0x38, 0x75, 0x35, 0x62, 0xec, 0xc3,
	0xee, 0x98, 0x04, 0x09, 0x8d, 0x31, 0x4b, 0x24, 0x4f, 0x24, 0xce, 0x76, 0x1d, 0x91, 0x90, 0x36,
	0xca, 0x26, 0xea, 0x6c, 0xb8, 0xdb, 0x1a, 0x78, 0xab, 0xea, 0x27, 0xaa, 0x7c, 0x4c, 0x42, 0x6a,
	0x3c, 0x85, 0xa6, 0x1f, 0x0d, 0xfd, 0x41, 0xb1, 0xb6, 0xa2, 0xb4, 0x3b, 0x19, 0xb1, 0x20, 0xde,
	0x87, 0x5d, 0x15, 0x4c, 0xa1, 0x76, 0x4d, 0xcf, 0xd5, 0xc0, 0xbc, 0xb4, 0xfd, 0x13, 0xc1, 0xd6,
	0x91, 0x7f, 0x45, 0x87, 0xff, 0xe2, 0xdb, 0x81, 0xaa, 0x6a, 0xaf, 0x3c, 0xd6, 0x9c, 0xbb, 0x79,
	0x56, 0xcf, 0x7a, 0x97, 0x96, 0x55, 0x63, 0x57, 0xa3, 0xc6, 0x33, 0xd8, 0x1c, 0x52, 0x8f, 0x24,
	0x81, 0xc4, 0x2a, 0x12, 0xe5, 0xb1, 0xe6, 0xec, 0x2c, 0x6a, 0xb5, 0xec, 0xff, 0x8c, 0x3e, 0x4d,
	0xe1, 0xd5, 0x49, 0xaf, 0xad, 0x4a, 0xba, 0xfd, 0x39, 0x75, 0xac, 0x9d, 0xbe, 0xcc, 0x9f, 0x47,
	0xe3, 0x18, 0xee, 0x78, 0x69, 0x12, 0x38, 0xa0, 0x11, 0xf6, 0x34, 0xa1, 0xdc, 0xd7, 0x1c, 0x33,
	0xbf, 0xab, 0xa2, 0xb8, 0x7a, 0x25, 0xb7, 0xee, 0xcd, 0xae, 0x1b, 0x3d, 0xa8, 0x8f, 0x89, 0x98,
	0xe9, 0xa6, 0xf3, 0x69, 0xe5, 0xbb, 0x2d, 0x1e, 0xb9, 0x5e, 0xc9, 0xdd, 0x1c, 0xe7, 0x57, 0xbb,
	0xff, 0xc1, 0xba, 0xbe, 0x3a, 0xed, 0x6f, 0x08, 0x9a, 0x87, 0xfa, 0x52, 0xf5, 0xd5, 0x9d, 0x9a,
	0xb5, 0xf0, 0x1e, 0x6a, 0xd9, 0x28, 0x1c, 0x12, 0xde, 0x40, 0x66, 0xa5, 0x53, 0x73, 0xf6, 0xf2,
	0xe3, 0x96, 0x8b, 0xad, 0x6c, 0xda, 0x1b, 0xc2, 0x0f, 0x23, 0x29, 0x26, 0x2e, 0x78, 0xd7, 0x0b,
	0x4d, 0x0c, 0xf5, 0xb9, 0xb2, 0x71, 0x1b, 0x2a, 0x17, 0x74, 0xa2, 0x02, 0xda, 0x70, 0xd3, 0xbf,
	0xc6, 0x1e, 0x54, 0xf5, 0xa7, 0x2c, 0x17, 0x84, 0x56, 0x90, 0xb8, 0xab, 0xf1, 0x83, 0xf2, 0x13,
	0xd4, 0xfd, 0x84, 0xbe, 0x4c, 0x5b, 0xe8, 0xeb, 0xb4, 0x85, 0xbe, 0x4f, 0x5b, 0xe8, 0xe3, 0x8f,
	0x56, 0x09, 0xb6, 0x99, 0x18, 0xe5, 0x5b, 0x64, 0x8f, 0x49, 0xd7, 0x5c, 0xee, 0x41, 0xe5, 0x17,
	0xf7, 0xd1, 0x87, 0xe7, 0x23, 0x5f, 0x9e, 0x27, 0x67, 0xd6, 0x80, 0x85, 0xf6, 0x0b, 0xce, 0x03,
	0xdf, 0xf3, 0xa9, 0xb0, 0x47, 0xec, 0x51, 0xee, 0x2d, 0x50, 0x97, 0xdf, 0x5e, 0xf2, 0x74, 0xfd,
	0x46, 0xe8, 0x6c, 0x5d, 0x3d, 0x0c, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xea, 0x4a,
	0x15, 0xdf, 0x04, 0x00, 0x00,
}
