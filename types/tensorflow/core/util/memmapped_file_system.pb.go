// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/util/memmapped_file_system.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A message that describes one region of memmapped file.
type MemmappedFileSystemDirectoryElement struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length uint64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *MemmappedFileSystemDirectoryElement) Reset()         { *m = MemmappedFileSystemDirectoryElement{} }
func (m *MemmappedFileSystemDirectoryElement) String() string { return proto.CompactTextString(m) }
func (*MemmappedFileSystemDirectoryElement) ProtoMessage()    {}
func (*MemmappedFileSystemDirectoryElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b9f07bb6218b6bb, []int{0}
}
func (m *MemmappedFileSystemDirectoryElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemmappedFileSystemDirectoryElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemmappedFileSystemDirectoryElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemmappedFileSystemDirectoryElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemmappedFileSystemDirectoryElement.Merge(m, src)
}
func (m *MemmappedFileSystemDirectoryElement) XXX_Size() int {
	return m.Size()
}
func (m *MemmappedFileSystemDirectoryElement) XXX_DiscardUnknown() {
	xxx_messageInfo_MemmappedFileSystemDirectoryElement.DiscardUnknown(m)
}

var xxx_messageInfo_MemmappedFileSystemDirectoryElement proto.InternalMessageInfo

func (m *MemmappedFileSystemDirectoryElement) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MemmappedFileSystemDirectoryElement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemmappedFileSystemDirectoryElement) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// A directory of regions in a memmapped file.
type MemmappedFileSystemDirectory struct {
	Element []*MemmappedFileSystemDirectoryElement `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (m *MemmappedFileSystemDirectory) Reset()         { *m = MemmappedFileSystemDirectory{} }
func (m *MemmappedFileSystemDirectory) String() string { return proto.CompactTextString(m) }
func (*MemmappedFileSystemDirectory) ProtoMessage()    {}
func (*MemmappedFileSystemDirectory) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b9f07bb6218b6bb, []int{1}
}
func (m *MemmappedFileSystemDirectory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemmappedFileSystemDirectory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemmappedFileSystemDirectory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemmappedFileSystemDirectory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemmappedFileSystemDirectory.Merge(m, src)
}
func (m *MemmappedFileSystemDirectory) XXX_Size() int {
	return m.Size()
}
func (m *MemmappedFileSystemDirectory) XXX_DiscardUnknown() {
	xxx_messageInfo_MemmappedFileSystemDirectory.DiscardUnknown(m)
}

var xxx_messageInfo_MemmappedFileSystemDirectory proto.InternalMessageInfo

func (m *MemmappedFileSystemDirectory) GetElement() []*MemmappedFileSystemDirectoryElement {
	if m != nil {
		return m.Element
	}
	return nil
}

func init() {
	proto.RegisterType((*MemmappedFileSystemDirectoryElement)(nil), "tensorflow.MemmappedFileSystemDirectoryElement")
	proto.RegisterType((*MemmappedFileSystemDirectory)(nil), "tensorflow.MemmappedFileSystemDirectory")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/memmapped_file_system.proto", fileDescriptor_3b9f07bb6218b6bb)
}

var fileDescriptor_3b9f07bb6218b6bb = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x2d, 0xc9, 0xcc,
	0xd1, 0xcf, 0x4d, 0xcd, 0xcd, 0x4d, 0x2c, 0x28, 0x48, 0x4d, 0x89, 0x4f, 0xcb, 0xcc, 0x49, 0x8d,
	0x2f, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0xe8,
	0x50, 0xca, 0xe4, 0x52, 0xf6, 0x85, 0x29, 0x75, 0xcb, 0xcc, 0x49, 0x0d, 0x06, 0x2b, 0x74, 0xc9,
	0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0x2f, 0xaa, 0x74, 0xcd, 0x49, 0xcd, 0x4d, 0xcd, 0x2b, 0x11, 0x12,
	0xe3, 0x62, 0xcb, 0x4f, 0x4b, 0x2b, 0x4e, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82,
	0xf2, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x90, 0xda, 0x9c, 0xd4, 0xbc, 0xf4, 0x92, 0x0c, 0x09, 0x66, 0x88, 0x5a, 0x08, 0x4f,
	0x29, 0x93, 0x4b, 0x06, 0x9f, 0x55, 0x42, 0x9e, 0x5c, 0xec, 0xa9, 0x10, 0xeb, 0x24, 0x18, 0x15,
	0x98, 0x35, 0xb8, 0x8d, 0xf4, 0xf5, 0x10, 0x0e, 0xd5, 0x23, 0xc2, 0x95, 0x41, 0x30, 0xfd, 0x4e,
	0xd2, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0xf0, 0x83, 0x91, 0x31, 0x89, 0x0d,
	0x1c, 0x0a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x1e, 0x69, 0xc7, 0x39, 0x01, 0x00,
	0x00,
}

func (m *MemmappedFileSystemDirectoryElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemmappedFileSystemDirectoryElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemmappedFileSystemDirectoryElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Offset != 0 {
		i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemmappedFileSystemDirectory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemmappedFileSystemDirectory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemmappedFileSystemDirectory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Element) > 0 {
		for iNdEx := len(m.Element) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Element[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMemmappedFileSystem(dAtA []byte, offset int, v uint64) int {
	offset -= sovMemmappedFileSystem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MemmappedFileSystemDirectoryElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovMemmappedFileSystem(uint64(m.Offset))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMemmappedFileSystem(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovMemmappedFileSystem(uint64(m.Length))
	}
	return n
}

func (m *MemmappedFileSystemDirectory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Element) > 0 {
		for _, e := range m.Element {
			l = e.Size()
			n += 1 + l + sovMemmappedFileSystem(uint64(l))
		}
	}
	return n
}

func sovMemmappedFileSystem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMemmappedFileSystem(x uint64) (n int) {
	return sovMemmappedFileSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MemmappedFileSystemDirectoryElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectoryElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectoryElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemmappedFileSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemmappedFileSystemDirectory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Element = append(m.Element, &MemmappedFileSystemDirectoryElement{})
			if err := m.Element[len(m.Element)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemmappedFileSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMemmappedFileSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMemmappedFileSystem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMemmappedFileSystem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMemmappedFileSystem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMemmappedFileSystem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMemmappedFileSystem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMemmappedFileSystem = fmt.Errorf("proto: unexpected end of group")
)
