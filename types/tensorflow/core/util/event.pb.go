// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/util/event.proto

package tensorflow

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	framework "github.com/Applifier/go-tensorflow/types/tensorflow/core/framework"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Current health status of a worker.
type WorkerHealth int32

const (
	WorkerHealth_OK                       WorkerHealth = 0
	WorkerHealth_RECEIVED_SHUTDOWN_SIGNAL WorkerHealth = 1
	WorkerHealth_INTERNAL_ERROR           WorkerHealth = 2
	WorkerHealth_SHUTTING_DOWN            WorkerHealth = 3
)

var WorkerHealth_name = map[int32]string{
	0: "OK",
	1: "RECEIVED_SHUTDOWN_SIGNAL",
	2: "INTERNAL_ERROR",
	3: "SHUTTING_DOWN",
}

var WorkerHealth_value = map[string]int32{
	"OK":                       0,
	"RECEIVED_SHUTDOWN_SIGNAL": 1,
	"INTERNAL_ERROR":           2,
	"SHUTTING_DOWN":            3,
}

func (x WorkerHealth) String() string {
	return proto.EnumName(WorkerHealth_name, int32(x))
}

func (WorkerHealth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{0}
}

// Indicates the behavior of the worker when an internal error or shutdown
// signal is received.
type WorkerShutdownMode int32

const (
	WorkerShutdownMode_DEFAULT                WorkerShutdownMode = 0
	WorkerShutdownMode_NOT_CONFIGURED         WorkerShutdownMode = 1
	WorkerShutdownMode_WAIT_FOR_COORDINATOR   WorkerShutdownMode = 2
	WorkerShutdownMode_SHUTDOWN_AFTER_TIMEOUT WorkerShutdownMode = 3
)

var WorkerShutdownMode_name = map[int32]string{
	0: "DEFAULT",
	1: "NOT_CONFIGURED",
	2: "WAIT_FOR_COORDINATOR",
	3: "SHUTDOWN_AFTER_TIMEOUT",
}

var WorkerShutdownMode_value = map[string]int32{
	"DEFAULT":                0,
	"NOT_CONFIGURED":         1,
	"WAIT_FOR_COORDINATOR":   2,
	"SHUTDOWN_AFTER_TIMEOUT": 3,
}

func (x WorkerShutdownMode) String() string {
	return proto.EnumName(WorkerShutdownMode_name, int32(x))
}

func (WorkerShutdownMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{1}
}

type LogMessage_Level int32

const (
	LogMessage_UNKNOWN LogMessage_Level = 0
	// Note: The logging level 10 cannot be named DEBUG. Some software
	// projects compile their C/C++ code with -DDEBUG in debug builds. So the
	// C++ code generated from this file should not have an identifier named
	// DEBUG.
	LogMessage_DEBUGGING LogMessage_Level = 10
	LogMessage_INFO      LogMessage_Level = 20
	LogMessage_WARN      LogMessage_Level = 30
	LogMessage_ERROR     LogMessage_Level = 40
	LogMessage_FATAL     LogMessage_Level = 50
)

var LogMessage_Level_name = map[int32]string{
	0:  "UNKNOWN",
	10: "DEBUGGING",
	20: "INFO",
	30: "WARN",
	40: "ERROR",
	50: "FATAL",
}

var LogMessage_Level_value = map[string]int32{
	"UNKNOWN":   0,
	"DEBUGGING": 10,
	"INFO":      20,
	"WARN":      30,
	"ERROR":     40,
	"FATAL":     50,
}

func (x LogMessage_Level) String() string {
	return proto.EnumName(LogMessage_Level_name, int32(x))
}

func (LogMessage_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{1, 0}
}

type SessionLog_SessionStatus int32

const (
	SessionLog_STATUS_UNSPECIFIED SessionLog_SessionStatus = 0
	SessionLog_START              SessionLog_SessionStatus = 1
	SessionLog_STOP               SessionLog_SessionStatus = 2
	SessionLog_CHECKPOINT         SessionLog_SessionStatus = 3
)

var SessionLog_SessionStatus_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "START",
	2: "STOP",
	3: "CHECKPOINT",
}

var SessionLog_SessionStatus_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"START":              1,
	"STOP":               2,
	"CHECKPOINT":         3,
}

func (x SessionLog_SessionStatus) String() string {
	return proto.EnumName(SessionLog_SessionStatus_name, int32(x))
}

func (SessionLog_SessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{2, 0}
}

// Protocol buffer representing an event that happened during
// the execution of a Brain model.
type Event struct {
	// Timestamp of the event.
	WallTime float64 `protobuf:"fixed64,1,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// Global step of the event.
	Step int64 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	// Types that are valid to be assigned to What:
	//	*Event_FileVersion
	//	*Event_GraphDef
	//	*Event_Summary
	//	*Event_LogMessage
	//	*Event_SessionLog
	//	*Event_TaggedRunMetadata
	//	*Event_MetaGraphDef
	What isEvent_What `protobuf_oneof:"what"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_What interface {
	isEvent_What()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_FileVersion struct {
	FileVersion string `protobuf:"bytes,3,opt,name=file_version,json=fileVersion,proto3,oneof" json:"file_version,omitempty"`
}
type Event_GraphDef struct {
	GraphDef []byte `protobuf:"bytes,4,opt,name=graph_def,json=graphDef,proto3,oneof" json:"graph_def,omitempty"`
}
type Event_Summary struct {
	Summary *framework.Summary `protobuf:"bytes,5,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
}
type Event_LogMessage struct {
	LogMessage *LogMessage `protobuf:"bytes,6,opt,name=log_message,json=logMessage,proto3,oneof" json:"log_message,omitempty"`
}
type Event_SessionLog struct {
	SessionLog *SessionLog `protobuf:"bytes,7,opt,name=session_log,json=sessionLog,proto3,oneof" json:"session_log,omitempty"`
}
type Event_TaggedRunMetadata struct {
	TaggedRunMetadata *TaggedRunMetadata `protobuf:"bytes,8,opt,name=tagged_run_metadata,json=taggedRunMetadata,proto3,oneof" json:"tagged_run_metadata,omitempty"`
}
type Event_MetaGraphDef struct {
	MetaGraphDef []byte `protobuf:"bytes,9,opt,name=meta_graph_def,json=metaGraphDef,proto3,oneof" json:"meta_graph_def,omitempty"`
}

func (*Event_FileVersion) isEvent_What()       {}
func (*Event_GraphDef) isEvent_What()          {}
func (*Event_Summary) isEvent_What()           {}
func (*Event_LogMessage) isEvent_What()        {}
func (*Event_SessionLog) isEvent_What()        {}
func (*Event_TaggedRunMetadata) isEvent_What() {}
func (*Event_MetaGraphDef) isEvent_What()      {}

func (m *Event) GetWhat() isEvent_What {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *Event) GetWallTime() float64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *Event) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Event) GetFileVersion() string {
	if x, ok := m.GetWhat().(*Event_FileVersion); ok {
		return x.FileVersion
	}
	return ""
}

func (m *Event) GetGraphDef() []byte {
	if x, ok := m.GetWhat().(*Event_GraphDef); ok {
		return x.GraphDef
	}
	return nil
}

func (m *Event) GetSummary() *framework.Summary {
	if x, ok := m.GetWhat().(*Event_Summary); ok {
		return x.Summary
	}
	return nil
}

func (m *Event) GetLogMessage() *LogMessage {
	if x, ok := m.GetWhat().(*Event_LogMessage); ok {
		return x.LogMessage
	}
	return nil
}

func (m *Event) GetSessionLog() *SessionLog {
	if x, ok := m.GetWhat().(*Event_SessionLog); ok {
		return x.SessionLog
	}
	return nil
}

func (m *Event) GetTaggedRunMetadata() *TaggedRunMetadata {
	if x, ok := m.GetWhat().(*Event_TaggedRunMetadata); ok {
		return x.TaggedRunMetadata
	}
	return nil
}

func (m *Event) GetMetaGraphDef() []byte {
	if x, ok := m.GetWhat().(*Event_MetaGraphDef); ok {
		return x.MetaGraphDef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_FileVersion)(nil),
		(*Event_GraphDef)(nil),
		(*Event_Summary)(nil),
		(*Event_LogMessage)(nil),
		(*Event_SessionLog)(nil),
		(*Event_TaggedRunMetadata)(nil),
		(*Event_MetaGraphDef)(nil),
	}
}

// Protocol buffer used for logging messages to the events file.
type LogMessage struct {
	Level   LogMessage_Level `protobuf:"varint,1,opt,name=level,proto3,enum=tensorflow.LogMessage_Level" json:"level,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{1}
}
func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return m.Size()
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetLevel() LogMessage_Level {
	if m != nil {
		return m.Level
	}
	return LogMessage_UNKNOWN
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Protocol buffer used for logging session state.
type SessionLog struct {
	Status SessionLog_SessionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tensorflow.SessionLog_SessionStatus" json:"status,omitempty"`
	// This checkpoint_path contains both the path and filename.
	CheckpointPath string `protobuf:"bytes,2,opt,name=checkpoint_path,json=checkpointPath,proto3" json:"checkpoint_path,omitempty"`
	Msg            string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SessionLog) Reset()         { *m = SessionLog{} }
func (m *SessionLog) String() string { return proto.CompactTextString(m) }
func (*SessionLog) ProtoMessage()    {}
func (*SessionLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{2}
}
func (m *SessionLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionLog.Merge(m, src)
}
func (m *SessionLog) XXX_Size() int {
	return m.Size()
}
func (m *SessionLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionLog.DiscardUnknown(m)
}

var xxx_messageInfo_SessionLog proto.InternalMessageInfo

func (m *SessionLog) GetStatus() SessionLog_SessionStatus {
	if m != nil {
		return m.Status
	}
	return SessionLog_STATUS_UNSPECIFIED
}

func (m *SessionLog) GetCheckpointPath() string {
	if m != nil {
		return m.CheckpointPath
	}
	return ""
}

func (m *SessionLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// For logging the metadata output for a single session.run() call.
type TaggedRunMetadata struct {
	// Tag name associated with this metadata.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Byte-encoded version of the `RunMetadata` proto in order to allow lazy
	// deserialization.
	RunMetadata []byte `protobuf:"bytes,2,opt,name=run_metadata,json=runMetadata,proto3" json:"run_metadata,omitempty"`
}

func (m *TaggedRunMetadata) Reset()         { *m = TaggedRunMetadata{} }
func (m *TaggedRunMetadata) String() string { return proto.CompactTextString(m) }
func (*TaggedRunMetadata) ProtoMessage()    {}
func (*TaggedRunMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{3}
}
func (m *TaggedRunMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaggedRunMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaggedRunMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaggedRunMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaggedRunMetadata.Merge(m, src)
}
func (m *TaggedRunMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaggedRunMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaggedRunMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaggedRunMetadata proto.InternalMessageInfo

func (m *TaggedRunMetadata) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TaggedRunMetadata) GetRunMetadata() []byte {
	if m != nil {
		return m.RunMetadata
	}
	return nil
}

type WatchdogConfig struct {
	TimeoutMs int64 `protobuf:"varint,1,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
}

func (m *WatchdogConfig) Reset()         { *m = WatchdogConfig{} }
func (m *WatchdogConfig) String() string { return proto.CompactTextString(m) }
func (*WatchdogConfig) ProtoMessage()    {}
func (*WatchdogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{4}
}
func (m *WatchdogConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchdogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchdogConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchdogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchdogConfig.Merge(m, src)
}
func (m *WatchdogConfig) XXX_Size() int {
	return m.Size()
}
func (m *WatchdogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchdogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WatchdogConfig proto.InternalMessageInfo

func (m *WatchdogConfig) GetTimeoutMs() int64 {
	if m != nil {
		return m.TimeoutMs
	}
	return 0
}

type RequestedExitCode struct {
	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (m *RequestedExitCode) Reset()         { *m = RequestedExitCode{} }
func (m *RequestedExitCode) String() string { return proto.CompactTextString(m) }
func (*RequestedExitCode) ProtoMessage()    {}
func (*RequestedExitCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{5}
}
func (m *RequestedExitCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestedExitCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestedExitCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestedExitCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedExitCode.Merge(m, src)
}
func (m *RequestedExitCode) XXX_Size() int {
	return m.Size()
}
func (m *RequestedExitCode) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedExitCode.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedExitCode proto.InternalMessageInfo

func (m *RequestedExitCode) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type WorkerHeartbeatRequest struct {
	ShutdownMode   WorkerShutdownMode `protobuf:"varint,1,opt,name=shutdown_mode,json=shutdownMode,proto3,enum=tensorflow.WorkerShutdownMode" json:"shutdown_mode,omitempty"`
	WatchdogConfig *WatchdogConfig    `protobuf:"bytes,2,opt,name=watchdog_config,json=watchdogConfig,proto3" json:"watchdog_config,omitempty"`
	ExitCode       *RequestedExitCode `protobuf:"bytes,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (m *WorkerHeartbeatRequest) Reset()         { *m = WorkerHeartbeatRequest{} }
func (m *WorkerHeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*WorkerHeartbeatRequest) ProtoMessage()    {}
func (*WorkerHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{6}
}
func (m *WorkerHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerHeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerHeartbeatRequest.Merge(m, src)
}
func (m *WorkerHeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkerHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerHeartbeatRequest proto.InternalMessageInfo

func (m *WorkerHeartbeatRequest) GetShutdownMode() WorkerShutdownMode {
	if m != nil {
		return m.ShutdownMode
	}
	return WorkerShutdownMode_DEFAULT
}

func (m *WorkerHeartbeatRequest) GetWatchdogConfig() *WatchdogConfig {
	if m != nil {
		return m.WatchdogConfig
	}
	return nil
}

func (m *WorkerHeartbeatRequest) GetExitCode() *RequestedExitCode {
	if m != nil {
		return m.ExitCode
	}
	return nil
}

type WorkerHeartbeatResponse struct {
	HealthStatus WorkerHealth `protobuf:"varint,1,opt,name=health_status,json=healthStatus,proto3,enum=tensorflow.WorkerHealth" json:"health_status,omitempty"`
	WorkerLog    []*Event     `protobuf:"bytes,2,rep,name=worker_log,json=workerLog,proto3" json:"worker_log,omitempty"`
	Hostname     string       `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *WorkerHeartbeatResponse) Reset()         { *m = WorkerHeartbeatResponse{} }
func (m *WorkerHeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*WorkerHeartbeatResponse) ProtoMessage()    {}
func (*WorkerHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c32e35f2f2971c10, []int{7}
}
func (m *WorkerHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerHeartbeatResponse.Merge(m, src)
}
func (m *WorkerHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkerHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerHeartbeatResponse proto.InternalMessageInfo

func (m *WorkerHeartbeatResponse) GetHealthStatus() WorkerHealth {
	if m != nil {
		return m.HealthStatus
	}
	return WorkerHealth_OK
}

func (m *WorkerHeartbeatResponse) GetWorkerLog() []*Event {
	if m != nil {
		return m.WorkerLog
	}
	return nil
}

func (m *WorkerHeartbeatResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterEnum("tensorflow.WorkerHealth", WorkerHealth_name, WorkerHealth_value)
	proto.RegisterEnum("tensorflow.WorkerShutdownMode", WorkerShutdownMode_name, WorkerShutdownMode_value)
	proto.RegisterEnum("tensorflow.LogMessage_Level", LogMessage_Level_name, LogMessage_Level_value)
	proto.RegisterEnum("tensorflow.SessionLog_SessionStatus", SessionLog_SessionStatus_name, SessionLog_SessionStatus_value)
	proto.RegisterType((*Event)(nil), "tensorflow.Event")
	proto.RegisterType((*LogMessage)(nil), "tensorflow.LogMessage")
	proto.RegisterType((*SessionLog)(nil), "tensorflow.SessionLog")
	proto.RegisterType((*TaggedRunMetadata)(nil), "tensorflow.TaggedRunMetadata")
	proto.RegisterType((*WatchdogConfig)(nil), "tensorflow.WatchdogConfig")
	proto.RegisterType((*RequestedExitCode)(nil), "tensorflow.RequestedExitCode")
	proto.RegisterType((*WorkerHeartbeatRequest)(nil), "tensorflow.WorkerHeartbeatRequest")
	proto.RegisterType((*WorkerHeartbeatResponse)(nil), "tensorflow.WorkerHeartbeatResponse")
}

func init() { proto.RegisterFile("tensorflow/core/util/event.proto", fileDescriptor_c32e35f2f2971c10) }

var fileDescriptor_c32e35f2f2971c10 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xb7, 0x43, 0x48, 0xe0, 0x41, 0x58, 0x67, 0x76, 0x95, 0x5a, 0xe9, 0x06, 0x51, 0x5a, 0x75,
	0xd1, 0x1e, 0xc2, 0x8a, 0x9e, 0x5a, 0xb5, 0xaa, 0x1c, 0x30, 0x60, 0x05, 0x6c, 0x34, 0x36, 0xcb,
	0xa1, 0x87, 0x91, 0x17, 0x06, 0x83, 0x62, 0x33, 0xd4, 0x1e, 0xc2, 0xf6, 0x5b, 0xf4, 0x43, 0x54,
	0x95, 0xfa, 0x4d, 0x7a, 0x5c, 0xa9, 0x97, 0x9e, 0xaa, 0x2a, 0xf9, 0x12, 0x3d, 0x56, 0x63, 0x9b,
	0x00, 0xcb, 0xde, 0xde, 0xbc, 0xf9, 0xfd, 0x9e, 0xdf, 0xef, 0xfd, 0xf1, 0x40, 0x85, 0xd3, 0x45,
	0xc4, 0xc2, 0xa9, 0xcf, 0xd6, 0xf5, 0x31, 0x0b, 0x69, 0x7d, 0xc5, 0xe7, 0x7e, 0x9d, 0xde, 0xd3,
	0x05, 0xbf, 0x5e, 0x86, 0x8c, 0x33, 0x04, 0x5b, 0xc4, 0xe5, 0xab, 0x8f, 0xd1, 0xd3, 0xd0, 0x0d,
	0xe8, 0x9a, 0x85, 0x77, 0xf5, 0x68, 0x15, 0x04, 0x6e, 0xf8, 0x4b, 0x42, 0xaa, 0xfe, 0x96, 0x81,
	0xac, 0x2e, 0x82, 0xa0, 0xcf, 0x21, 0xbf, 0x76, 0x7d, 0x9f, 0xf0, 0x79, 0x40, 0x55, 0xb9, 0x22,
	0xd7, 0x64, 0x9c, 0x13, 0x0e, 0x67, 0x1e, 0x50, 0x84, 0xe0, 0x38, 0xe2, 0x74, 0xa9, 0x1e, 0x55,
	0xe4, 0x5a, 0x06, 0xc7, 0x36, 0xfa, 0x12, 0x8a, 0xd3, 0xb9, 0x4f, 0xc9, 0x3d, 0x0d, 0xa3, 0x39,
	0x5b, 0xa8, 0x99, 0x8a, 0x5c, 0xcb, 0x77, 0x25, 0x5c, 0x10, 0xde, 0xb7, 0x89, 0x13, 0x5d, 0x41,
	0xde, 0x0b, 0xdd, 0xe5, 0x8c, 0x4c, 0xe8, 0x54, 0x3d, 0xae, 0xc8, 0xb5, 0x62, 0x57, 0xc2, 0xb9,
	0xd8, 0xd5, 0xa2, 0x53, 0x54, 0x87, 0xd3, 0x34, 0x1f, 0x35, 0x5b, 0x91, 0x6b, 0x85, 0xc6, 0xf3,
	0xeb, 0x6d, 0xe6, 0xd7, 0x76, 0x72, 0xd5, 0x95, 0xf0, 0x06, 0x85, 0xbe, 0x85, 0x82, 0xcf, 0x3c,
	0x12, 0xd0, 0x28, 0x72, 0x3d, 0xaa, 0x9e, 0xc4, 0xa4, 0x8b, 0x5d, 0x52, 0x8f, 0x79, 0xfd, 0xe4,
	0xb6, 0x2b, 0x61, 0xf0, 0x9f, 0x4e, 0x82, 0x1a, 0xd1, 0x48, 0x64, 0x45, 0x7c, 0xe6, 0xa9, 0xa7,
	0x87, 0x54, 0x3b, 0xb9, 0xee, 0x31, 0x4f, 0x50, 0xa3, 0xa7, 0x13, 0xb2, 0xe0, 0x39, 0x77, 0x3d,
	0x8f, 0x4e, 0x48, 0xb8, 0x5a, 0x90, 0x80, 0x72, 0x77, 0xe2, 0x72, 0x57, 0xcd, 0xc5, 0x21, 0xae,
	0x76, 0x43, 0x38, 0x31, 0x0c, 0xaf, 0x16, 0xfd, 0x14, 0xd4, 0x95, 0xf0, 0x39, 0xff, 0xd8, 0x89,
	0xbe, 0x86, 0x92, 0x88, 0x42, 0xb6, 0xb5, 0xc9, 0xa7, 0xb5, 0x29, 0x0a, 0x7f, 0x27, 0xad, 0xcf,
	0xcd, 0x09, 0x1c, 0xaf, 0x67, 0x2e, 0xaf, 0xfe, 0x21, 0x03, 0x6c, 0x85, 0xa1, 0x06, 0x64, 0x7d,
	0x7a, 0x4f, 0xfd, 0xb8, 0x4f, 0xa5, 0xc6, 0xcb, 0x4f, 0xeb, 0xbf, 0xee, 0x09, 0x0c, 0x4e, 0xa0,
	0x48, 0x85, 0xd3, 0x4d, 0xd5, 0x44, 0x17, 0xf3, 0x78, 0x73, 0xac, 0xf6, 0x21, 0x1b, 0x23, 0x51,
	0x01, 0x4e, 0x87, 0xe6, 0xad, 0x69, 0x8d, 0x4c, 0x45, 0x42, 0x67, 0x90, 0x6f, 0xe9, 0x37, 0xc3,
	0x4e, 0xc7, 0x30, 0x3b, 0x0a, 0xa0, 0x1c, 0x1c, 0x1b, 0x66, 0xdb, 0x52, 0x5e, 0x08, 0x6b, 0xa4,
	0x61, 0x53, 0x29, 0xa3, 0x3c, 0x64, 0x75, 0x8c, 0x2d, 0xac, 0xd4, 0x84, 0xd9, 0xd6, 0x1c, 0xad,
	0xa7, 0x34, 0xaa, 0x7f, 0xc9, 0x00, 0xdb, 0x4a, 0xa2, 0xef, 0xe1, 0x24, 0xe2, 0x2e, 0x5f, 0x45,
	0x69, 0xb2, 0x5f, 0x7d, 0xba, 0xe2, 0x1b, 0xd3, 0x8e, 0xb1, 0x38, 0xe5, 0xa0, 0x57, 0xf0, 0x6c,
	0x3c, 0xa3, 0xe3, 0xbb, 0x25, 0x9b, 0x2f, 0x38, 0x59, 0xba, 0x7c, 0x96, 0x66, 0x5f, 0xda, 0xba,
	0x07, 0x2e, 0x9f, 0x21, 0x05, 0x32, 0x41, 0xe4, 0x25, 0x43, 0x88, 0x85, 0x59, 0xed, 0xc1, 0xd9,
	0x5e, 0x4c, 0x74, 0x01, 0xc8, 0x76, 0x34, 0x67, 0x68, 0x93, 0xa1, 0x69, 0x0f, 0xf4, 0xa6, 0xd1,
	0x36, 0xf4, 0x96, 0x22, 0x89, 0xdc, 0x6d, 0x47, 0xc3, 0x8e, 0x22, 0x0b, 0x6d, 0xb6, 0x63, 0x0d,
	0x94, 0x23, 0x54, 0x02, 0x68, 0x76, 0xf5, 0xe6, 0xed, 0xc0, 0x32, 0x4c, 0x47, 0xc9, 0x54, 0xbb,
	0x70, 0x7e, 0xd0, 0x5b, 0xf1, 0x51, 0xee, 0x7a, 0xb1, 0xb0, 0x3c, 0x16, 0x26, 0xfa, 0x02, 0x8a,
	0x7b, 0x23, 0x22, 0x92, 0x2d, 0xe2, 0x42, 0xb8, 0x25, 0x55, 0xeb, 0x50, 0x1a, 0xb9, 0x7c, 0x3c,
	0x9b, 0x30, 0xaf, 0xc9, 0x16, 0xd3, 0xb9, 0x87, 0xae, 0x00, 0xc4, 0xd6, 0xb1, 0x15, 0x27, 0x41,
	0x52, 0xa6, 0x0c, 0xce, 0xa7, 0x9e, 0x7e, 0x54, 0x7d, 0x03, 0xe7, 0x98, 0xfe, 0xbc, 0xa2, 0x11,
	0xa7, 0x13, 0xfd, 0xfd, 0x9c, 0x37, 0xd9, 0x84, 0x8a, 0x75, 0xa5, 0xef, 0xe7, 0x9c, 0x8c, 0xd9,
	0x24, 0x59, 0xd7, 0x2c, 0xce, 0xd1, 0xf4, 0xb2, 0xfa, 0x8f, 0x0c, 0x17, 0x23, 0x16, 0xde, 0xd1,
	0xb0, 0x4b, 0xdd, 0x90, 0xbf, 0xa3, 0x2e, 0x4f, 0x23, 0xa0, 0x26, 0x9c, 0x45, 0xb3, 0x15, 0x9f,
	0xb0, 0xf5, 0x82, 0x04, 0x1b, 0x6e, 0xa9, 0x51, 0xde, 0xed, 0x4a, 0x42, 0xb5, 0x53, 0x58, 0x9f,
	0x4d, 0x28, 0x2e, 0x46, 0x3b, 0x27, 0xd4, 0x84, 0x67, 0xeb, 0x54, 0x02, 0x19, 0xc7, 0x1a, 0x62,
	0xa1, 0x85, 0xc6, 0xe5, 0x5e, 0x98, 0x3d, 0x95, 0xb8, 0xb4, 0xde, 0x57, 0xfd, 0xdd, 0xae, 0x82,
	0xcc, 0xe1, 0x2a, 0x1d, 0x68, 0xde, 0x11, 0xf8, 0xbb, 0x0c, 0x9f, 0x1d, 0x08, 0x8c, 0x96, 0x6c,
	0x11, 0x51, 0xf4, 0x03, 0x9c, 0xcd, 0xa8, 0xeb, 0xf3, 0x19, 0xd9, 0x9b, 0x3b, 0xf5, 0x50, 0x61,
	0x37, 0x86, 0xe1, 0x62, 0x02, 0x4f, 0xa7, 0xe4, 0x0d, 0xc0, 0x3a, 0xbe, 0x8d, 0xff, 0x12, 0x47,
	0x95, 0x4c, 0xad, 0xd0, 0x38, 0xdf, 0xe5, 0xc6, 0xbf, 0x4b, 0x9c, 0x4f, 0x40, 0x62, 0xc2, 0x2f,
	0x21, 0x37, 0x63, 0x11, 0x5f, 0xb8, 0x01, 0x4d, 0xe7, 0xef, 0xe9, 0xfc, 0xfa, 0x27, 0x28, 0xee,
	0x7e, 0x0b, 0x9d, 0xc0, 0x91, 0x75, 0xab, 0x48, 0xe8, 0x25, 0xa8, 0x58, 0x6f, 0xea, 0xc6, 0x5b,
	0xbd, 0x45, 0xec, 0xee, 0xd0, 0x69, 0x59, 0x23, 0x93, 0xd8, 0x46, 0xc7, 0xd4, 0x7a, 0x8a, 0x8c,
	0x10, 0x94, 0x0c, 0xd3, 0xd1, 0xb1, 0xa9, 0xf5, 0x48, 0xb2, 0x61, 0x47, 0xe8, 0x1c, 0xce, 0x04,
	0xd0, 0x31, 0xcc, 0x0e, 0x11, 0x68, 0x25, 0xf3, 0xfa, 0x0e, 0xd0, 0x61, 0xab, 0xc4, 0x16, 0xb7,
	0xf4, 0xb6, 0x36, 0xec, 0x39, 0x8a, 0x24, 0x22, 0x99, 0x96, 0x43, 0x9a, 0x96, 0xd9, 0x36, 0x3a,
	0x43, 0xac, 0xb7, 0x14, 0x19, 0xa9, 0xf0, 0x62, 0xa4, 0x19, 0x0e, 0x69, 0x5b, 0x98, 0x34, 0x2d,
	0x0b, 0xb7, 0x0c, 0x53, 0x73, 0xe2, 0x6f, 0x5c, 0xc2, 0xc5, 0x53, 0x32, 0x5a, 0xdb, 0xd1, 0x31,
	0x71, 0x8c, 0xbe, 0x6e, 0x0d, 0x1d, 0x25, 0x73, 0xf3, 0xe3, 0x9f, 0x0f, 0x65, 0xf9, 0xc3, 0x43,
	0x59, 0xfe, 0xf7, 0xa1, 0x2c, 0xff, 0xfa, 0x58, 0x96, 0x3e, 0x3c, 0x96, 0xa5, 0xbf, 0x1f, 0xcb,
	0x12, 0x3c, 0x67, 0xa1, 0xb7, 0x5b, 0x20, 0xf1, 0x32, 0xdd, 0x14, 0xe2, 0x32, 0x0d, 0xc4, 0x23,
	0x13, 0x0d, 0xe4, 0xff, 0x64, 0xf9, 0xdd, 0x49, 0xfc, 0xe2, 0x7c, 0xf3, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0x30, 0x31, 0x59, 0xca, 0x06, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.What != nil {
		{
			size := m.What.Size()
			i -= size
			if _, err := m.What.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Step != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x10
	}
	if m.WallTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WallTime))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Event_FileVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_FileVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FileVersion)
	copy(dAtA[i:], m.FileVersion)
	i = encodeVarintEvent(dAtA, i, uint64(len(m.FileVersion)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Event_GraphDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_GraphDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GraphDef != nil {
		i -= len(m.GraphDef)
		copy(dAtA[i:], m.GraphDef)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.GraphDef)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Summary != nil {
		{
			size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event_LogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_LogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogMessage != nil {
		{
			size, err := m.LogMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Event_SessionLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_SessionLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SessionLog != nil {
		{
			size, err := m.SessionLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Event_TaggedRunMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_TaggedRunMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TaggedRunMetadata != nil {
		{
			size, err := m.TaggedRunMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Event_MetaGraphDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_MetaGraphDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MetaGraphDef != nil {
		i -= len(m.MetaGraphDef)
		copy(dAtA[i:], m.MetaGraphDef)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MetaGraphDef)))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *LogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Level != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckpointPath) > 0 {
		i -= len(m.CheckpointPath)
		copy(dAtA[i:], m.CheckpointPath)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CheckpointPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaggedRunMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaggedRunMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaggedRunMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunMetadata) > 0 {
		i -= len(m.RunMetadata)
		copy(dAtA[i:], m.RunMetadata)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RunMetadata)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchdogConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchdogConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchdogConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestedExitCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestedExitCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestedExitCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExitCode != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkerHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerHeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExitCode != nil {
		{
			size, err := m.ExitCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WatchdogConfig != nil {
		{
			size, err := m.WatchdogConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ShutdownMode != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ShutdownMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkerHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkerLog) > 0 {
		for iNdEx := len(m.WorkerLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.HealthStatus != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.HealthStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WallTime != 0 {
		n += 9
	}
	if m.Step != 0 {
		n += 1 + sovEvent(uint64(m.Step))
	}
	if m.What != nil {
		n += m.What.Size()
	}
	return n
}

func (m *Event_FileVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileVersion)
	n += 1 + l + sovEvent(uint64(l))
	return n
}
func (m *Event_GraphDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GraphDef != nil {
		l = len(m.GraphDef)
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_LogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogMessage != nil {
		l = m.LogMessage.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_SessionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionLog != nil {
		l = m.SessionLog.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_TaggedRunMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaggedRunMetadata != nil {
		l = m.TaggedRunMetadata.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_MetaGraphDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaGraphDef != nil {
		l = len(m.MetaGraphDef)
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *LogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovEvent(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SessionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	l = len(m.CheckpointPath)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *TaggedRunMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RunMetadata)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *WatchdogConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutMs != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutMs))
	}
	return n
}

func (m *RequestedExitCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExitCode != 0 {
		n += 1 + sovEvent(uint64(m.ExitCode))
	}
	return n
}

func (m *WorkerHeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShutdownMode != 0 {
		n += 1 + sovEvent(uint64(m.ShutdownMode))
	}
	if m.WatchdogConfig != nil {
		l = m.WatchdogConfig.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ExitCode != nil {
		l = m.ExitCode.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *WorkerHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthStatus != 0 {
		n += 1 + sovEvent(uint64(m.HealthStatus))
	}
	if len(m.WorkerLog) > 0 {
		for _, e := range m.WorkerLog {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WallTime = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.What = &Event_FileVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphDef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.What = &Event_GraphDef{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &framework.Summary{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_Summary{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_LogMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_SessionLog{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedRunMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaggedRunMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_TaggedRunMetadata{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaGraphDef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.What = &Event_MetaGraphDef{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogMessage_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SessionLog_SessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaggedRunMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaggedRunMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaggedRunMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunMetadata = append(m.RunMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RunMetadata == nil {
				m.RunMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchdogConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchdogConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchdogConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutMs", wireType)
			}
			m.TimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedExitCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedExitCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedExitCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShutdownMode", wireType)
			}
			m.ShutdownMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShutdownMode |= WorkerShutdownMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchdogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WatchdogConfig == nil {
				m.WatchdogConfig = &WatchdogConfig{}
			}
			if err := m.WatchdogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitCode == nil {
				m.ExitCode = &RequestedExitCode{}
			}
			if err := m.ExitCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthStatus", wireType)
			}
			m.HealthStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthStatus |= WorkerHealth(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerLog = append(m.WorkerLog, &Event{})
			if err := m.WorkerLog[len(m.WorkerLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
