// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/util/example_proto_fast_parsing_test.proto

package tensorflow

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	example "github.com/Applifier/go-tensorflow/types/tensorflow/core/example"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This message is parallel to Example, but with additional fields to test
// unknown fields handling in example_proto_fast_parsing_test.cc.
type ExampleWithExtras struct {
	Features *example.Features `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
	Extra1   string            `protobuf:"bytes,1337,opt,name=extra1,proto3" json:"extra1,omitempty"`
	Extra2   int64             `protobuf:"varint,1338,opt,name=extra2,proto3" json:"extra2,omitempty"`
	Extra3   uint32            `protobuf:"fixed32,1339,opt,name=extra3,proto3" json:"extra3,omitempty"`
	Extra4   uint64            `protobuf:"fixed64,1340,opt,name=extra4,proto3" json:"extra4,omitempty"`
	Extra5   float64           `protobuf:"fixed64,1341,opt,name=extra5,proto3" json:"extra5,omitempty"`
	Extra6   []float32         `protobuf:"fixed32,1342,rep,packed,name=extra6,proto3" json:"extra6,omitempty"`
	Extra7   *example.Features `protobuf:"bytes,1343,opt,name=extra7,proto3" json:"extra7,omitempty"`
}

func (m *ExampleWithExtras) Reset()         { *m = ExampleWithExtras{} }
func (m *ExampleWithExtras) String() string { return proto.CompactTextString(m) }
func (*ExampleWithExtras) ProtoMessage()    {}
func (*ExampleWithExtras) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1031c2dac6823ae, []int{0}
}
func (m *ExampleWithExtras) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExampleWithExtras) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExampleWithExtras.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExampleWithExtras) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleWithExtras.Merge(m, src)
}
func (m *ExampleWithExtras) XXX_Size() int {
	return m.Size()
}
func (m *ExampleWithExtras) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleWithExtras.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleWithExtras proto.InternalMessageInfo

func (m *ExampleWithExtras) GetFeatures() *example.Features {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ExampleWithExtras) GetExtra1() string {
	if m != nil {
		return m.Extra1
	}
	return ""
}

func (m *ExampleWithExtras) GetExtra2() int64 {
	if m != nil {
		return m.Extra2
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra3() uint32 {
	if m != nil {
		return m.Extra3
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra4() uint64 {
	if m != nil {
		return m.Extra4
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra5() float64 {
	if m != nil {
		return m.Extra5
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra6() []float32 {
	if m != nil {
		return m.Extra6
	}
	return nil
}

func (m *ExampleWithExtras) GetExtra7() *example.Features {
	if m != nil {
		return m.Extra7
	}
	return nil
}

func init() {
	proto.RegisterType((*ExampleWithExtras)(nil), "tensorflow.ExampleWithExtras")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/example_proto_fast_parsing_test.proto", fileDescriptor_f1031c2dac6823ae)
}

var fileDescriptor_f1031c2dac6823ae = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x2a, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x2d, 0xc9, 0xcc,
	0xd1, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x8d, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x8f, 0x4f,
	0x4b, 0x2c, 0x2e, 0x89, 0x2f, 0x48, 0x2c, 0x2a, 0xce, 0xcc, 0x4b, 0x8f, 0x2f, 0x49, 0x2d, 0x2e,
	0xd1, 0x03, 0x8b, 0x0b, 0x71, 0x21, 0xf4, 0x4a, 0xa9, 0xa2, 0x9b, 0x03, 0x35, 0x42, 0x3f, 0x2d,
	0x35, 0xb1, 0xa4, 0xb4, 0x28, 0x15, 0xa2, 0x45, 0xa9, 0x8b, 0x89, 0x4b, 0xd0, 0x15, 0x22, 0x13,
	0x9e, 0x59, 0x92, 0xe1, 0x5a, 0x51, 0x52, 0x94, 0x58, 0x2c, 0x64, 0xc0, 0xc5, 0x01, 0x55, 0x56,
	0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa2, 0x87, 0x30, 0x4f, 0xcf, 0x0d, 0x2a, 0x17,
	0x04, 0x57, 0x25, 0x24, 0xce, 0xc5, 0x96, 0x0a, 0xd2, 0x6b, 0x28, 0xb1, 0x93, 0x4b, 0x81, 0x51,
	0x83, 0x33, 0x08, 0xca, 0x85, 0x4b, 0x18, 0x49, 0xec, 0x02, 0x49, 0x30, 0x43, 0x25, 0x8c, 0xe0,
	0x12, 0xc6, 0x12, 0xbb, 0x41, 0x12, 0xec, 0x50, 0x09, 0x63, 0xb8, 0x84, 0x89, 0xc4, 0x1e, 0x90,
	0x04, 0x1b, 0x54, 0xc2, 0x04, 0x2e, 0x61, 0x2a, 0xb1, 0x17, 0x24, 0xc1, 0x08, 0x95, 0x30, 0x85,
	0x4b, 0x98, 0x49, 0xec, 0xe3, 0x52, 0x60, 0xd6, 0x60, 0x82, 0x4a, 0x98, 0x09, 0xe9, 0x42, 0x25,
	0xcc, 0x25, 0xf6, 0x73, 0xe1, 0xf1, 0x06, 0x54, 0x91, 0x93, 0xf4, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0xfc, 0x60, 0x64, 0x4c, 0x62, 0x03, 0x07, 0x98, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x66, 0x3b, 0xe6, 0xa3, 0xa1, 0x01, 0x00, 0x00,
}

func (m *ExampleWithExtras) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleWithExtras) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExampleWithExtras) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Extra7 != nil {
		{
			size, err := m.Extra7.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExampleProtoFastParsingTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Extra6) > 0 {
		for iNdEx := len(m.Extra6) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.Extra6[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
		}
		i = encodeVarintExampleProtoFastParsingTest(dAtA, i, uint64(len(m.Extra6)*4))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xf2
	}
	if m.Extra5 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Extra5))))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xe9
	}
	if m.Extra4 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Extra4))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xe1
	}
	if m.Extra3 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Extra3))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xdd
	}
	if m.Extra2 != 0 {
		i = encodeVarintExampleProtoFastParsingTest(dAtA, i, uint64(m.Extra2))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Extra1) > 0 {
		i -= len(m.Extra1)
		copy(dAtA[i:], m.Extra1)
		i = encodeVarintExampleProtoFastParsingTest(dAtA, i, uint64(len(m.Extra1)))
		i--
		dAtA[i] = 0x53
		i--
		dAtA[i] = 0xca
	}
	if m.Features != nil {
		{
			size, err := m.Features.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExampleProtoFastParsingTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExampleProtoFastParsingTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovExampleProtoFastParsingTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExampleWithExtras) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Features != nil {
		l = m.Features.Size()
		n += 1 + l + sovExampleProtoFastParsingTest(uint64(l))
	}
	l = len(m.Extra1)
	if l > 0 {
		n += 2 + l + sovExampleProtoFastParsingTest(uint64(l))
	}
	if m.Extra2 != 0 {
		n += 2 + sovExampleProtoFastParsingTest(uint64(m.Extra2))
	}
	if m.Extra3 != 0 {
		n += 6
	}
	if m.Extra4 != 0 {
		n += 10
	}
	if m.Extra5 != 0 {
		n += 10
	}
	if len(m.Extra6) > 0 {
		n += 2 + sovExampleProtoFastParsingTest(uint64(len(m.Extra6)*4)) + len(m.Extra6)*4
	}
	if m.Extra7 != nil {
		l = m.Extra7.Size()
		n += 2 + l + sovExampleProtoFastParsingTest(uint64(l))
	}
	return n
}

func sovExampleProtoFastParsingTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExampleProtoFastParsingTest(x uint64) (n int) {
	return sovExampleProtoFastParsingTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExampleWithExtras) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExampleProtoFastParsingTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleWithExtras: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleWithExtras: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Features == nil {
				m.Features = &example.Features{}
			}
			if err := m.Features.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1337:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1338:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra2", wireType)
			}
			m.Extra2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1339:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra3", wireType)
			}
			m.Extra3 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra3 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 1340:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra4", wireType)
			}
			m.Extra4 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra4 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 1341:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Extra5 = float64(math.Float64frombits(v))
		case 1342:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Extra6 = append(m.Extra6, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExampleProtoFastParsingTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExampleProtoFastParsingTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExampleProtoFastParsingTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Extra6) == 0 {
					m.Extra6 = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Extra6 = append(m.Extra6, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra6", wireType)
			}
		case 1343:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra7 == nil {
				m.Extra7 = &example.Features{}
			}
			if err := m.Extra7.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExampleProtoFastParsingTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExampleProtoFastParsingTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExampleProtoFastParsingTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExampleProtoFastParsingTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExampleProtoFastParsingTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExampleProtoFastParsingTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExampleProtoFastParsingTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExampleProtoFastParsingTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExampleProtoFastParsingTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExampleProtoFastParsingTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExampleProtoFastParsingTest = fmt.Errorf("proto: unexpected end of group")
)
