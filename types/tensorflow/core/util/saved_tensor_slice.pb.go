// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/util/saved_tensor_slice.proto

package tensorflow

import (
	fmt "fmt"
	framework "github.com/Applifier/go-tensorflow/types/tensorflow/core/framework"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metadata describing the set of slices of the same tensor saved in a
// checkpoint file.
type SavedSliceMeta struct {
	// Name of the tensor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Shape of the tensor
	Shape *framework.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	// Type of the tensor
	Type framework.DataType `protobuf:"varint,3,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	// Explicit list of slices saved in the checkpoint file.
	Slice []*framework.TensorSliceProto `protobuf:"bytes,4,rep,name=slice,proto3" json:"slice,omitempty"`
}

func (m *SavedSliceMeta) Reset()         { *m = SavedSliceMeta{} }
func (m *SavedSliceMeta) String() string { return proto.CompactTextString(m) }
func (*SavedSliceMeta) ProtoMessage()    {}
func (*SavedSliceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{0}
}
func (m *SavedSliceMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedSliceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedSliceMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedSliceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedSliceMeta.Merge(m, src)
}
func (m *SavedSliceMeta) XXX_Size() int {
	return m.Size()
}
func (m *SavedSliceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedSliceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SavedSliceMeta proto.InternalMessageInfo

func (m *SavedSliceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSliceMeta) GetShape() *framework.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *SavedSliceMeta) GetType() framework.DataType {
	if m != nil {
		return m.Type
	}
	return framework.DataType_DT_INVALID
}

func (m *SavedSliceMeta) GetSlice() []*framework.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

// Metadata describing the set of tensor slices saved in a checkpoint file.
// It is always stored at the beginning of each checkpoint file.
type SavedTensorSliceMeta struct {
	// Each SavedSliceMeta describes the slices for one tensor.
	Tensor []*SavedSliceMeta `protobuf:"bytes,1,rep,name=tensor,proto3" json:"tensor,omitempty"`
	// Compatibility version of this checkpoint.  See core/public/version.h
	// for version history.
	Versions *framework.VersionDef `protobuf:"bytes,2,opt,name=versions,proto3" json:"versions,omitempty"`
}

func (m *SavedTensorSliceMeta) Reset()         { *m = SavedTensorSliceMeta{} }
func (m *SavedTensorSliceMeta) String() string { return proto.CompactTextString(m) }
func (*SavedTensorSliceMeta) ProtoMessage()    {}
func (*SavedTensorSliceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{1}
}
func (m *SavedTensorSliceMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedTensorSliceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedTensorSliceMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedTensorSliceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedTensorSliceMeta.Merge(m, src)
}
func (m *SavedTensorSliceMeta) XXX_Size() int {
	return m.Size()
}
func (m *SavedTensorSliceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedTensorSliceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SavedTensorSliceMeta proto.InternalMessageInfo

func (m *SavedTensorSliceMeta) GetTensor() []*SavedSliceMeta {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SavedTensorSliceMeta) GetVersions() *framework.VersionDef {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Saved tensor slice: it stores the name of the tensors, the slice, and the
// raw data.
type SavedSlice struct {
	// Name of the tensor that this slice belongs to. This must be identical to
	// the name used to encode the key for this record.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Extent of the slice.  Must have one entry for each of the dimension of the
	// tensor that this slice belongs to.
	Slice *framework.TensorSliceProto `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
	// The raw data of the slice is stored as a TensorProto. Only raw data are
	// stored (we don't fill in fields such as dtype or tensor_shape).
	Data *framework.TensorProto `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SavedSlice) Reset()         { *m = SavedSlice{} }
func (m *SavedSlice) String() string { return proto.CompactTextString(m) }
func (*SavedSlice) ProtoMessage()    {}
func (*SavedSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{2}
}
func (m *SavedSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedSlice.Merge(m, src)
}
func (m *SavedSlice) XXX_Size() int {
	return m.Size()
}
func (m *SavedSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedSlice.DiscardUnknown(m)
}

var xxx_messageInfo_SavedSlice proto.InternalMessageInfo

func (m *SavedSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSlice) GetSlice() *framework.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *SavedSlice) GetData() *framework.TensorProto {
	if m != nil {
		return m.Data
	}
	return nil
}

// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
// message.
type SavedTensorSlices struct {
	// This is only present at the first item of each checkpoint file and serves
	// as a table of contents, listing all the tensor slices saved in this file.
	Meta *SavedTensorSliceMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// This exists in all but the first item of each checkpoint file.
	Data *SavedSlice `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SavedTensorSlices) Reset()         { *m = SavedTensorSlices{} }
func (m *SavedTensorSlices) String() string { return proto.CompactTextString(m) }
func (*SavedTensorSlices) ProtoMessage()    {}
func (*SavedTensorSlices) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{3}
}
func (m *SavedTensorSlices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedTensorSlices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedTensorSlices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedTensorSlices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedTensorSlices.Merge(m, src)
}
func (m *SavedTensorSlices) XXX_Size() int {
	return m.Size()
}
func (m *SavedTensorSlices) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedTensorSlices.DiscardUnknown(m)
}

var xxx_messageInfo_SavedTensorSlices proto.InternalMessageInfo

func (m *SavedTensorSlices) GetMeta() *SavedTensorSliceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SavedTensorSlices) GetData() *SavedSlice {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SavedSliceMeta)(nil), "tensorflow.SavedSliceMeta")
	proto.RegisterType((*SavedTensorSliceMeta)(nil), "tensorflow.SavedTensorSliceMeta")
	proto.RegisterType((*SavedSlice)(nil), "tensorflow.SavedSlice")
	proto.RegisterType((*SavedTensorSlices)(nil), "tensorflow.SavedTensorSlices")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/saved_tensor_slice.proto", fileDescriptor_d8f545ad75d84da2)
}

var fileDescriptor_d8f545ad75d84da2 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5f, 0x4b, 0xc2, 0x50,
	0x18, 0xc6, 0x3d, 0xb9, 0xa4, 0x5e, 0x41, 0xe8, 0x24, 0x36, 0x24, 0xc6, 0x18, 0x14, 0xa3, 0x3f,
	0x0e, 0x56, 0x9f, 0x40, 0xbc, 0x0a, 0x02, 0x99, 0xd2, 0xad, 0x9c, 0xf4, 0x58, 0x92, 0x7a, 0xc6,
	0x36, 0x15, 0x6f, 0x82, 0xbe, 0x41, 0x9f, 0xa6, 0xcf, 0xd0, 0xa5, 0x97, 0x5d, 0x86, 0x7e, 0x89,
	0x2e, 0xe3, 0xbc, 0x9b, 0x6d, 0xcd, 0x56, 0xdd, 0x1d, 0x78, 0x7f, 0xcf, 0xf3, 0xbe, 0xcf, 0xc3,
	0x06, 0xe7, 0x01, 0x1f, 0xfb, 0xc2, 0xeb, 0x0f, 0xc5, 0xcc, 0xea, 0x0a, 0x8f, 0x5b, 0x93, 0x60,
	0x30, 0xb4, 0x7c, 0x36, 0xe5, 0xbd, 0x4e, 0x38, 0xea, 0xf8, 0xc3, 0x41, 0x97, 0xd7, 0x5c, 0x4f,
	0x04, 0x82, 0x42, 0x8c, 0x57, 0xcf, 0xd2, 0xd2, 0xbe, 0xc7, 0x46, 0x7c, 0x26, 0xbc, 0x07, 0x6b,
	0xad, 0xbc, 0x67, 0x6e, 0xa4, 0xfc, 0x0f, 0x1d, 0xef, 0xa9, 0x1e, 0xff, 0x45, 0x47, 0xdc, 0xd1,
	0x2f, 0xdc, 0xdc, 0xe5, 0x7e, 0x84, 0x99, 0xd9, 0xd8, 0x94, 0x7b, 0xfe, 0x40, 0x8c, 0x23, 0xd2,
	0x78, 0x21, 0x50, 0x6a, 0xc9, 0xf4, 0x2d, 0x79, 0xcd, 0x35, 0x0f, 0x18, 0xa5, 0xa0, 0x8c, 0xd9,
	0x88, 0xab, 0x44, 0x27, 0xe6, 0xae, 0x83, 0x6f, 0x6a, 0xc3, 0x36, 0x86, 0x53, 0xb7, 0x74, 0x62,
	0x16, 0xed, 0xc3, 0x5a, 0xbc, 0xa0, 0xd6, 0xc6, 0x67, 0x4b, 0x8e, 0x9b, 0xd2, 0xd3, 0x09, 0x51,
	0x6a, 0x82, 0x22, 0x6f, 0x52, 0xf3, 0x3a, 0x31, 0x4b, 0x76, 0x39, 0x29, 0x69, 0xb0, 0x80, 0xb5,
	0xe7, 0x2e, 0x77, 0x90, 0x40, 0x77, 0xb9, 0x5e, 0x55, 0xf4, 0x7c, 0x86, 0xbb, 0x1c, 0xaf, 0xdd,
	0xe5, 0xdb, 0x78, 0x84, 0x32, 0xde, 0x9d, 0x98, 0xe3, 0xf5, 0x36, 0x14, 0x42, 0xb5, 0x4a, 0xd0,
	0xac, 0x9a, 0x34, 0xfb, 0x9e, 0xd4, 0x89, 0x48, 0x6a, 0xc3, 0xce, 0xba, 0x96, 0x28, 0x60, 0x25,
	0xa9, 0xba, 0x09, 0x67, 0x0d, 0xde, 0x77, 0xbe, 0x38, 0xe3, 0x89, 0x00, 0xc4, 0x76, 0x99, 0xa5,
	0x61, 0xac, 0xec, 0xd2, 0xd2, 0xb1, 0xe8, 0x29, 0x28, 0x3d, 0x16, 0x30, 0x2c, 0xad, 0x68, 0x1f,
	0x6c, 0x4a, 0x42, 0x1a, 0x21, 0x63, 0x02, 0x7b, 0xe9, 0x0e, 0x7c, 0x7a, 0x09, 0xca, 0x88, 0x07,
	0x0c, 0x2f, 0x29, 0xda, 0xfa, 0x46, 0xfc, 0x54, 0x61, 0x0e, 0xd2, 0xf4, 0x24, 0xda, 0xfb, 0x43,
	0xfc, 0x38, 0x65, 0xb8, 0xb6, 0x7e, 0xf5, 0xba, 0xd4, 0xc8, 0x62, 0xa9, 0x91, 0xf7, 0xa5, 0x46,
	0x9e, 0x57, 0x5a, 0x6e, 0xb1, 0xd2, 0x72, 0x6f, 0x2b, 0x2d, 0x07, 0xfb, 0xc2, 0xbb, 0x4b, 0x4a,
	0xe5, 0xcf, 0x55, 0xaf, 0xa4, 0xd7, 0x62, 0x04, 0xbf, 0x49, 0x3e, 0x08, 0xb9, 0x2d, 0xe0, 0x67,
	0x78, 0xf1, 0x19, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x1d, 0x2c, 0x05, 0x98, 0x03, 0x00, 0x00,
}

func (m *SavedSliceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedSliceMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedSliceMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for iNdEx := len(m.Slice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Shape != nil {
		{
			size, err := m.Shape.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SavedTensorSliceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedTensorSliceMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedTensorSliceMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Versions != nil {
		{
			size, err := m.Versions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tensor) > 0 {
		for iNdEx := len(m.Tensor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tensor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SavedSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedSlice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedSlice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Slice != nil {
		{
			size, err := m.Slice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SavedTensorSlices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedTensorSlices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedTensorSlices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSavedTensorSlice(dAtA []byte, offset int, v uint64) int {
	offset -= sovSavedTensorSlice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SavedSliceMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSavedTensorSlice(uint64(m.Type))
	}
	if len(m.Slice) > 0 {
		for _, e := range m.Slice {
			l = e.Size()
			n += 1 + l + sovSavedTensorSlice(uint64(l))
		}
	}
	return n
}

func (m *SavedTensorSliceMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovSavedTensorSlice(uint64(l))
		}
	}
	if m.Versions != nil {
		l = m.Versions.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func (m *SavedSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func (m *SavedTensorSlices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func sovSavedTensorSlice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSavedTensorSlice(x uint64) (n int) {
	return sovSavedTensorSlice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SavedSliceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedSliceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedSliceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &framework.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= framework.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slice = append(m.Slice, &framework.TensorSliceProto{})
			if err := m.Slice[len(m.Slice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedTensorSliceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedTensorSliceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedTensorSliceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &SavedSliceMeta{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = &framework.VersionDef{}
			}
			if err := m.Versions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &framework.TensorSliceProto{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &framework.TensorProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedTensorSlices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedTensorSlices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedTensorSlices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SavedTensorSliceMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SavedSlice{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSavedTensorSlice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSavedTensorSlice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSavedTensorSlice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSavedTensorSlice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSavedTensorSlice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSavedTensorSlice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSavedTensorSlice = fmt.Errorf("proto: unexpected end of group")
)
