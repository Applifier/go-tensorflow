// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/attr_value.proto

package framework

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing the value for an attr used to configure an Op.
// Comment indicates the corresponding attr type.  Only the field matching the
// attr type may be filled.
type AttrValue struct {
	// Types that are valid to be assigned to Value:
	//	*AttrValue_S
	//	*AttrValue_I
	//	*AttrValue_F
	//	*AttrValue_B
	//	*AttrValue_Type
	//	*AttrValue_Shape
	//	*AttrValue_Tensor
	//	*AttrValue_List
	//	*AttrValue_Func
	//	*AttrValue_Placeholder
	Value isAttrValue_Value `protobuf_oneof:"value"`
}

func (m *AttrValue) Reset()         { *m = AttrValue{} }
func (m *AttrValue) String() string { return proto.CompactTextString(m) }
func (*AttrValue) ProtoMessage()    {}
func (*AttrValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e758bf81984406, []int{0}
}
func (m *AttrValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttrValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttrValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttrValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrValue.Merge(m, src)
}
func (m *AttrValue) XXX_Size() int {
	return m.Size()
}
func (m *AttrValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttrValue proto.InternalMessageInfo

type isAttrValue_Value interface {
	isAttrValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AttrValue_S struct {
	S []byte `protobuf:"bytes,2,opt,name=s,proto3,oneof" json:"s,omitempty"`
}
type AttrValue_I struct {
	I int64 `protobuf:"varint,3,opt,name=i,proto3,oneof" json:"i,omitempty"`
}
type AttrValue_F struct {
	F float32 `protobuf:"fixed32,4,opt,name=f,proto3,oneof" json:"f,omitempty"`
}
type AttrValue_B struct {
	B bool `protobuf:"varint,5,opt,name=b,proto3,oneof" json:"b,omitempty"`
}
type AttrValue_Type struct {
	Type DataType `protobuf:"varint,6,opt,name=type,proto3,enum=tensorflow.DataType,oneof" json:"type,omitempty"`
}
type AttrValue_Shape struct {
	Shape *TensorShapeProto `protobuf:"bytes,7,opt,name=shape,proto3,oneof" json:"shape,omitempty"`
}
type AttrValue_Tensor struct {
	Tensor *TensorProto `protobuf:"bytes,8,opt,name=tensor,proto3,oneof" json:"tensor,omitempty"`
}
type AttrValue_List struct {
	List *AttrValue_ListValue `protobuf:"bytes,1,opt,name=list,proto3,oneof" json:"list,omitempty"`
}
type AttrValue_Func struct {
	Func *NameAttrList `protobuf:"bytes,10,opt,name=func,proto3,oneof" json:"func,omitempty"`
}
type AttrValue_Placeholder struct {
	Placeholder string `protobuf:"bytes,9,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
}

func (*AttrValue_S) isAttrValue_Value()           {}
func (*AttrValue_I) isAttrValue_Value()           {}
func (*AttrValue_F) isAttrValue_Value()           {}
func (*AttrValue_B) isAttrValue_Value()           {}
func (*AttrValue_Type) isAttrValue_Value()        {}
func (*AttrValue_Shape) isAttrValue_Value()       {}
func (*AttrValue_Tensor) isAttrValue_Value()      {}
func (*AttrValue_List) isAttrValue_Value()        {}
func (*AttrValue_Func) isAttrValue_Value()        {}
func (*AttrValue_Placeholder) isAttrValue_Value() {}

func (m *AttrValue) GetValue() isAttrValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AttrValue) GetS() []byte {
	if x, ok := m.GetValue().(*AttrValue_S); ok {
		return x.S
	}
	return nil
}

func (m *AttrValue) GetI() int64 {
	if x, ok := m.GetValue().(*AttrValue_I); ok {
		return x.I
	}
	return 0
}

func (m *AttrValue) GetF() float32 {
	if x, ok := m.GetValue().(*AttrValue_F); ok {
		return x.F
	}
	return 0
}

func (m *AttrValue) GetB() bool {
	if x, ok := m.GetValue().(*AttrValue_B); ok {
		return x.B
	}
	return false
}

func (m *AttrValue) GetType() DataType {
	if x, ok := m.GetValue().(*AttrValue_Type); ok {
		return x.Type
	}
	return DataType_DT_INVALID
}

func (m *AttrValue) GetShape() *TensorShapeProto {
	if x, ok := m.GetValue().(*AttrValue_Shape); ok {
		return x.Shape
	}
	return nil
}

func (m *AttrValue) GetTensor() *TensorProto {
	if x, ok := m.GetValue().(*AttrValue_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (m *AttrValue) GetList() *AttrValue_ListValue {
	if x, ok := m.GetValue().(*AttrValue_List); ok {
		return x.List
	}
	return nil
}

func (m *AttrValue) GetFunc() *NameAttrList {
	if x, ok := m.GetValue().(*AttrValue_Func); ok {
		return x.Func
	}
	return nil
}

func (m *AttrValue) GetPlaceholder() string {
	if x, ok := m.GetValue().(*AttrValue_Placeholder); ok {
		return x.Placeholder
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttrValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttrValue_S)(nil),
		(*AttrValue_I)(nil),
		(*AttrValue_F)(nil),
		(*AttrValue_B)(nil),
		(*AttrValue_Type)(nil),
		(*AttrValue_Shape)(nil),
		(*AttrValue_Tensor)(nil),
		(*AttrValue_List)(nil),
		(*AttrValue_Func)(nil),
		(*AttrValue_Placeholder)(nil),
	}
}

// LINT.IfChange
type AttrValue_ListValue struct {
	S      [][]byte            `protobuf:"bytes,2,rep,name=s,proto3" json:"s,omitempty"`
	I      []int64             `protobuf:"varint,3,rep,packed,name=i,proto3" json:"i,omitempty"`
	F      []float32           `protobuf:"fixed32,4,rep,packed,name=f,proto3" json:"f,omitempty"`
	B      []bool              `protobuf:"varint,5,rep,packed,name=b,proto3" json:"b,omitempty"`
	Type   []DataType          `protobuf:"varint,6,rep,packed,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	Shape  []*TensorShapeProto `protobuf:"bytes,7,rep,name=shape,proto3" json:"shape,omitempty"`
	Tensor []*TensorProto      `protobuf:"bytes,8,rep,name=tensor,proto3" json:"tensor,omitempty"`
	Func   []*NameAttrList     `protobuf:"bytes,9,rep,name=func,proto3" json:"func,omitempty"`
}

func (m *AttrValue_ListValue) Reset()         { *m = AttrValue_ListValue{} }
func (m *AttrValue_ListValue) String() string { return proto.CompactTextString(m) }
func (*AttrValue_ListValue) ProtoMessage()    {}
func (*AttrValue_ListValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e758bf81984406, []int{0, 0}
}
func (m *AttrValue_ListValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttrValue_ListValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttrValue_ListValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttrValue_ListValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrValue_ListValue.Merge(m, src)
}
func (m *AttrValue_ListValue) XXX_Size() int {
	return m.Size()
}
func (m *AttrValue_ListValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrValue_ListValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttrValue_ListValue proto.InternalMessageInfo

func (m *AttrValue_ListValue) GetS() [][]byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *AttrValue_ListValue) GetI() []int64 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *AttrValue_ListValue) GetF() []float32 {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *AttrValue_ListValue) GetB() []bool {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *AttrValue_ListValue) GetType() []DataType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *AttrValue_ListValue) GetShape() []*TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *AttrValue_ListValue) GetTensor() []*TensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *AttrValue_ListValue) GetFunc() []*NameAttrList {
	if m != nil {
		return m.Func
	}
	return nil
}

// A list of attr names and their values. The whole list is attached
// with a string name.  E.g., MatMul[T=float].
type NameAttrList struct {
	Name string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attr map[string]*AttrValue `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NameAttrList) Reset()         { *m = NameAttrList{} }
func (m *NameAttrList) String() string { return proto.CompactTextString(m) }
func (*NameAttrList) ProtoMessage()    {}
func (*NameAttrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e758bf81984406, []int{1}
}
func (m *NameAttrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameAttrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameAttrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameAttrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameAttrList.Merge(m, src)
}
func (m *NameAttrList) XXX_Size() int {
	return m.Size()
}
func (m *NameAttrList) XXX_DiscardUnknown() {
	xxx_messageInfo_NameAttrList.DiscardUnknown(m)
}

var xxx_messageInfo_NameAttrList proto.InternalMessageInfo

func (m *NameAttrList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameAttrList) GetAttr() map[string]*AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func init() {
	proto.RegisterType((*AttrValue)(nil), "tensorflow.AttrValue")
	proto.RegisterType((*AttrValue_ListValue)(nil), "tensorflow.AttrValue.ListValue")
	proto.RegisterType((*NameAttrList)(nil), "tensorflow.NameAttrList")
	proto.RegisterMapType((map[string]*AttrValue)(nil), "tensorflow.NameAttrList.AttrEntry")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/attr_value.proto", fileDescriptor_06e758bf81984406)
}

var fileDescriptor_06e758bf81984406 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xbd, 0x5e, 0xa7, 0xad, 0x37, 0x51, 0x7f, 0xd1, 0xea, 0x87, 0x58, 0x45, 0xc8, 0x58,
	0x91, 0x40, 0xab, 0x12, 0x6c, 0x11, 0xfe, 0x08, 0x71, 0x6b, 0x04, 0x52, 0x0e, 0xa8, 0xaa, 0x4c,
	0xc5, 0x81, 0x4b, 0xe5, 0x84, 0x75, 0x62, 0xd5, 0x89, 0xad, 0xf5, 0x86, 0x2a, 0x4f, 0xc0, 0x85,
	0x43, 0x9f, 0x83, 0x27, 0xe1, 0xd8, 0x23, 0x47, 0x94, 0xbc, 0x04, 0x47, 0x34, 0xbb, 0xa9, 0x63,
	0x09, 0xd2, 0xde, 0x66, 0x66, 0xbf, 0xdf, 0xf1, 0xf8, 0xb3, 0x3b, 0xe4, 0x48, 0x89, 0x79, 0x99,
	0xcb, 0x24, 0xcb, 0x2f, 0xc3, 0x71, 0x2e, 0x45, 0x98, 0xc8, 0x78, 0x26, 0x2e, 0x73, 0x79, 0x11,
	0xc6, 0x4a, 0xc9, 0xf3, 0x2f, 0x71, 0xb6, 0x10, 0x41, 0x21, 0x73, 0x95, 0x53, 0xb2, 0xd5, 0x76,
	0x1e, 0xef, 0xf6, 0x99, 0x13, 0xe3, 0xe9, 0xf4, 0xee, 0xd2, 0x9d, 0x97, 0xd3, 0xb8, 0xd8, 0x7c,
	0xa1, 0xf3, 0xe8, 0x16, 0xf5, 0xb2, 0x10, 0xa5, 0x91, 0x75, 0xbf, 0x36, 0x88, 0x7b, 0xac, 0x94,
	0xfc, 0x08, 0xc3, 0xd1, 0x43, 0x82, 0x4a, 0x66, 0xfb, 0x88, 0xb7, 0x86, 0x56, 0x84, 0x4a, 0xc8,
	0x53, 0x86, 0x7d, 0xc4, 0x31, 0xe4, 0x29, 0xe4, 0x09, 0x73, 0x7c, 0xc4, 0x6d, 0xc8, 0x13, 0xc8,
	0x47, 0xac, 0xe1, 0x23, 0x7e, 0x00, 0xf9, 0x88, 0x1e, 0x11, 0x07, 0x9a, 0xb3, 0x3d, 0x1f, 0xf1,
	0xc3, 0xfe, 0xff, 0xc1, 0x76, 0x86, 0xe0, 0x6d, 0xac, 0xe2, 0xb3, 0x65, 0x21, 0x86, 0x56, 0xa4,
	0x35, 0xf4, 0x05, 0x69, 0xe8, 0x79, 0xd9, 0xbe, 0x8f, 0x78, 0xb3, 0xff, 0xa0, 0x2e, 0x3e, 0xd3,
	0xe1, 0x07, 0x38, 0x3e, 0x85, 0x31, 0x87, 0x56, 0x64, 0xc4, 0xf4, 0x19, 0xd9, 0x33, 0x3a, 0x76,
	0xa0, 0x6d, 0xf7, 0xff, 0xb6, 0xdd, 0x38, 0x36, 0x42, 0xfa, 0x92, 0x38, 0x59, 0x5a, 0x2a, 0x86,
	0xb4, 0xe1, 0x61, 0xdd, 0x50, 0xfd, 0x79, 0xf0, 0x3e, 0x2d, 0x95, 0x8e, 0x60, 0x3e, 0x90, 0xd3,
	0x80, 0x38, 0xc9, 0x62, 0x3e, 0x66, 0x44, 0xdb, 0x58, 0xdd, 0x76, 0x12, 0xcf, 0x04, 0x58, 0xc1,
	0x04, 0x7a, 0xd0, 0xd1, 0x2e, 0x69, 0x16, 0x59, 0x3c, 0x16, 0xd3, 0x3c, 0xfb, 0x2c, 0x24, 0x73,
	0x7d, 0xc4, 0xdd, 0xa1, 0x15, 0xd5, 0x8b, 0x9d, 0x2b, 0x9b, 0xb8, 0xd5, 0x97, 0x68, 0xcb, 0xd0,
	0xc6, 0xbc, 0x05, 0xac, 0xdb, 0x86, 0x35, 0xe6, 0x78, 0x60, 0xb7, 0x11, 0xd0, 0x6e, 0x1b, 0xda,
	0x98, 0xdb, 0xa6, 0x92, 0x40, 0x05, 0x78, 0x63, 0x7e, 0x60, 0x2a, 0x23, 0xda, 0xab, 0x88, 0xe3,
	0x5d, 0xc4, 0xb5, 0xd4, 0x30, 0xef, 0x6f, 0x99, 0xe3, 0xbb, 0x98, 0xdf, 0x10, 0x0f, 0x6b, 0xc4,
	0xf1, 0x2d, 0xc4, 0x2b, 0xde, 0xbd, 0x0d, 0x38, 0x57, 0xcb, 0x77, 0x82, 0x33, 0xd8, 0x06, 0xfb,
	0xa4, 0xa1, 0x17, 0xa3, 0xfb, 0x1d, 0x91, 0x56, 0xfd, 0x9c, 0x52, 0xe2, 0xcc, 0xe3, 0x99, 0xd0,
	0xf7, 0xe6, 0x46, 0x3a, 0xa6, 0xaf, 0x88, 0x03, 0xbb, 0xa4, 0xa9, 0x35, 0xfb, 0xdd, 0x5d, 0xbd,
	0xf5, 0xc5, 0xbe, 0x9b, 0x2b, 0xb9, 0x8c, 0xb4, 0xbe, 0x73, 0x62, 0x5e, 0xb9, 0x2e, 0xd1, 0x36,
	0xc1, 0x17, 0x62, 0xb9, 0xe9, 0x0b, 0x21, 0x7d, 0xb2, 0x19, 0x42, 0xbf, 0xfd, 0x66, 0xff, 0xde,
	0x3f, 0xdf, 0x48, 0x64, 0x34, 0x6f, 0xec, 0xd7, 0x68, 0xf0, 0x0d, 0xfd, 0x58, 0x79, 0xe8, 0x7a,
	0xe5, 0xa1, 0x5f, 0x2b, 0x0f, 0x5d, 0xad, 0x3d, 0xeb, 0x7a, 0xed, 0x59, 0x3f, 0xd7, 0x9e, 0x45,
	0x58, 0x2e, 0x27, 0x75, 0x7f, 0xb5, 0x77, 0x83, 0xff, 0xaa, 0x56, 0x1a, 0x58, 0x79, 0x8a, 0x3e,
	0x0d, 0x26, 0xa9, 0x9a, 0x2e, 0x46, 0xc1, 0x38, 0x9f, 0x85, 0xc7, 0x45, 0x91, 0xa5, 0x49, 0x2a,
	0x64, 0x38, 0xc9, 0x9f, 0xd6, 0xb6, 0x57, 0xaf, 0x6b, 0xb8, 0x73, 0x9d, 0x7f, 0x23, 0x34, 0xda,
	0xd3, 0xcb, 0xfc, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x06, 0xcd, 0x1b, 0x83, 0x04,
	0x00, 0x00,
}

func (m *AttrValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttrValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttrValue_List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.List != nil {
		{
			size, err := m.List.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttrValue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AttrValue_S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S != nil {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AttrValue_I) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_I) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAttrValue(dAtA, i, uint64(m.I))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *AttrValue_F) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_F) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.F))))
	i--
	dAtA[i] = 0x25
	return len(dAtA) - i, nil
}
func (m *AttrValue_B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.B {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *AttrValue_Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAttrValue(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *AttrValue_Shape) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_Shape) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Shape != nil {
		{
			size, err := m.Shape.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttrValue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AttrValue_Tensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_Tensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tensor != nil {
		{
			size, err := m.Tensor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttrValue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AttrValue_Placeholder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_Placeholder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Placeholder)
	copy(dAtA[i:], m.Placeholder)
	i = encodeVarintAttrValue(dAtA, i, uint64(len(m.Placeholder)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *AttrValue_Func) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_Func) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Func != nil {
		{
			size, err := m.Func.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttrValue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AttrValue_ListValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttrValue_ListValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrValue_ListValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		for iNdEx := len(m.Func) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Func[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttrValue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Tensor) > 0 {
		for iNdEx := len(m.Tensor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tensor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttrValue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Shape) > 0 {
		for iNdEx := len(m.Shape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttrValue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Type) > 0 {
		dAtA6 := make([]byte, len(m.Type)*10)
		var j5 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintAttrValue(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.B) > 0 {
		for iNdEx := len(m.B) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.B[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.F) > 0 {
		for iNdEx := len(m.F) - 1; iNdEx >= 0; iNdEx-- {
			f7 := math.Float32bits(float32(m.F[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f7))
		}
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.F)*4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.I) > 0 {
		dAtA9 := make([]byte, len(m.I)*10)
		var j8 int
		for _, num1 := range m.I {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintAttrValue(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.S) > 0 {
		for iNdEx := len(m.S) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.S[iNdEx])
			copy(dAtA[i:], m.S[iNdEx])
			i = encodeVarintAttrValue(dAtA, i, uint64(len(m.S[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *NameAttrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameAttrList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameAttrList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAttrValue(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAttrValue(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAttrValue(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttrValue(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttrValue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttrValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *AttrValue_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S != nil {
		l = len(m.S)
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_I) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAttrValue(uint64(m.I))
	return n
}
func (m *AttrValue_F) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *AttrValue_B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *AttrValue_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAttrValue(uint64(m.Type))
	return n
}
func (m *AttrValue_Shape) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_Tensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tensor != nil {
		l = m.Tensor.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_Placeholder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Placeholder)
	n += 1 + l + sovAttrValue(uint64(l))
	return n
}
func (m *AttrValue_Func) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Func != nil {
		l = m.Func.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_ListValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.S) > 0 {
		for _, b := range m.S {
			l = len(b)
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.I) > 0 {
		l = 0
		for _, e := range m.I {
			l += sovAttrValue(uint64(e))
		}
		n += 1 + sovAttrValue(uint64(l)) + l
	}
	if len(m.F) > 0 {
		n += 1 + sovAttrValue(uint64(len(m.F)*4)) + len(m.F)*4
	}
	if len(m.B) > 0 {
		n += 1 + sovAttrValue(uint64(len(m.B))) + len(m.B)*1
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovAttrValue(uint64(e))
		}
		n += 1 + sovAttrValue(uint64(l)) + l
	}
	if len(m.Shape) > 0 {
		for _, e := range m.Shape {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.Func) > 0 {
		for _, e := range m.Func {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	return n
}

func (m *NameAttrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttrValue(uint64(l))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAttrValue(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAttrValue(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAttrValue(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAttrValue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttrValue(x uint64) (n int) {
	return sovAttrValue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttrValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AttrValue_ListValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_List{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &AttrValue_S{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &AttrValue_I{v}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &AttrValue_F{float32(math.Float32frombits(v))}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &AttrValue_B{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v DataType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &AttrValue_Type{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TensorShapeProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Shape{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TensorProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Tensor{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &AttrValue_Placeholder{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NameAttrList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Func{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttrValue_ListValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S, make([]byte, postIndex-iNdEx))
			copy(m.S[len(m.S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.I = append(m.I, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAttrValue
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.I) == 0 {
					m.I = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.I = append(m.I, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.F = append(m.F, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAttrValue
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.F) == 0 {
					m.F = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.F = append(m.F, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B = append(m.B, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAttrValue
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.B) == 0 {
					m.B = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B = append(m.B, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
		case 6:
			if wireType == 0 {
				var v DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAttrValue
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]DataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shape = append(m.Shape, &TensorShapeProto{})
			if err := m.Shape[len(m.Shape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &TensorProto{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = append(m.Func, &NameAttrList{})
			if err := m.Func[len(m.Func)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameAttrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameAttrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameAttrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttrValue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]*AttrValue)
			}
			var mapkey string
			var mapvalue *AttrValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAttrValue
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAttrValue
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAttrValue
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAttrValue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttrValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAttrValue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAttrValue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttrValue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttrValue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttrValue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttrValue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttrValue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttrValue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttrValue = fmt.Errorf("proto: unexpected end of group")
)
