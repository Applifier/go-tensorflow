// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/tensor_slice.proto

package framework

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Can only be interpreted if you know the corresponding TensorShape.
type TensorSliceProto struct {
	// Extent of the slice in all tensor dimensions.
	//
	// Must have one entry for each of the dimension of the tensor that this
	// slice belongs to.  The order of sizes is the same as the order of
	// dimensions in the TensorShape.
	Extent []*TensorSliceProto_Extent `protobuf:"bytes,1,rep,name=extent,proto3" json:"extent,omitempty"`
}

func (m *TensorSliceProto) Reset()         { *m = TensorSliceProto{} }
func (m *TensorSliceProto) String() string { return proto.CompactTextString(m) }
func (*TensorSliceProto) ProtoMessage()    {}
func (*TensorSliceProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_efadfca37d8372d8, []int{0}
}
func (m *TensorSliceProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorSliceProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorSliceProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorSliceProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorSliceProto.Merge(m, src)
}
func (m *TensorSliceProto) XXX_Size() int {
	return m.Size()
}
func (m *TensorSliceProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorSliceProto.DiscardUnknown(m)
}

var xxx_messageInfo_TensorSliceProto proto.InternalMessageInfo

func (m *TensorSliceProto) GetExtent() []*TensorSliceProto_Extent {
	if m != nil {
		return m.Extent
	}
	return nil
}

// Extent of the slice in one dimension.
type TensorSliceProto_Extent struct {
	// Start index of the slice, starting at 0.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Length of the slice: if the length is missing or -1 we will
	// interpret this as "everything in this dimension".  We use
	// "oneof" to preserve information about whether the length is
	// present without changing the serialization format from the
	// prior proto2 version of this proto.
	//
	// Types that are valid to be assigned to HasLength:
	//	*TensorSliceProto_Extent_Length
	HasLength isTensorSliceProto_Extent_HasLength `protobuf_oneof:"has_length"`
}

func (m *TensorSliceProto_Extent) Reset()         { *m = TensorSliceProto_Extent{} }
func (m *TensorSliceProto_Extent) String() string { return proto.CompactTextString(m) }
func (*TensorSliceProto_Extent) ProtoMessage()    {}
func (*TensorSliceProto_Extent) Descriptor() ([]byte, []int) {
	return fileDescriptor_efadfca37d8372d8, []int{0, 0}
}
func (m *TensorSliceProto_Extent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorSliceProto_Extent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorSliceProto_Extent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorSliceProto_Extent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorSliceProto_Extent.Merge(m, src)
}
func (m *TensorSliceProto_Extent) XXX_Size() int {
	return m.Size()
}
func (m *TensorSliceProto_Extent) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorSliceProto_Extent.DiscardUnknown(m)
}

var xxx_messageInfo_TensorSliceProto_Extent proto.InternalMessageInfo

type isTensorSliceProto_Extent_HasLength interface {
	isTensorSliceProto_Extent_HasLength()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TensorSliceProto_Extent_Length struct {
	Length int64 `protobuf:"varint,2,opt,name=length,proto3,oneof"`
}

func (*TensorSliceProto_Extent_Length) isTensorSliceProto_Extent_HasLength() {}

func (m *TensorSliceProto_Extent) GetHasLength() isTensorSliceProto_Extent_HasLength {
	if m != nil {
		return m.HasLength
	}
	return nil
}

func (m *TensorSliceProto_Extent) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TensorSliceProto_Extent) GetLength() int64 {
	if x, ok := m.GetHasLength().(*TensorSliceProto_Extent_Length); ok {
		return x.Length
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TensorSliceProto_Extent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TensorSliceProto_Extent_OneofMarshaler, _TensorSliceProto_Extent_OneofUnmarshaler, _TensorSliceProto_Extent_OneofSizer, []interface{}{
		(*TensorSliceProto_Extent_Length)(nil),
	}
}

func _TensorSliceProto_Extent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TensorSliceProto_Extent)
	// has_length
	switch x := m.HasLength.(type) {
	case *TensorSliceProto_Extent_Length:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Length))
	case nil:
	default:
		return fmt.Errorf("TensorSliceProto_Extent.HasLength has unexpected type %T", x)
	}
	return nil
}

func _TensorSliceProto_Extent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TensorSliceProto_Extent)
	switch tag {
	case 2: // has_length.length
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HasLength = &TensorSliceProto_Extent_Length{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TensorSliceProto_Extent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TensorSliceProto_Extent)
	// has_length
	switch x := m.HasLength.(type) {
	case *TensorSliceProto_Extent_Length:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Length))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TensorSliceProto)(nil), "tensorflow.TensorSliceProto")
	proto.RegisterType((*TensorSliceProto_Extent)(nil), "tensorflow.TensorSliceProto.Extent")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/tensor_slice.proto", fileDescriptor_efadfca37d8372d8)
}

var fileDescriptor_efadfca37d8372d8 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x4f, 0x2b, 0x4a, 0xcc,
	0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x87, 0xc8, 0xc4, 0x17, 0xe7, 0x64, 0x26, 0xa7, 0xea, 0x15,
	0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x21, 0x54, 0x2b, 0x4d, 0x67, 0xe4, 0x12, 0x08, 0x01, 0x73,
	0x83, 0x41, 0x2a, 0x02, 0xc0, 0x0a, 0xac, 0xb9, 0xd8, 0x52, 0x2b, 0x4a, 0x52, 0xf3, 0x4a, 0x24,
	0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x94, 0xf5, 0x10, 0x3a, 0xf4, 0xd0, 0x55, 0xeb, 0xb9, 0x82,
	0x95, 0x06, 0x41, 0xb5, 0x48, 0xb9, 0x71, 0xb1, 0x41, 0x44, 0x84, 0x44, 0xb8, 0x58, 0x8b, 0x4b,
	0x12, 0x8b, 0x40, 0xa6, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x38, 0x42, 0x12, 0x5c, 0x6c, 0x39, 0xa9,
	0x79, 0xe9, 0x25, 0x19, 0x12, 0x4c, 0x20, 0x61, 0x0f, 0x86, 0x20, 0x28, 0xdf, 0x89, 0x87, 0x8b,
	0x2b, 0x23, 0xb1, 0x38, 0x1e, 0xca, 0xeb, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39,
	0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63,
	0x39, 0x06, 0x2e, 0x89, 0xfc, 0xa2, 0x74, 0x64, 0x27, 0xc1, 0x7d, 0xeb, 0x24, 0x88, 0xee, 0xba,
	0xe2, 0x00, 0xc6, 0x28, 0xa7, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d,
	0xc7, 0x82, 0x82, 0x9c, 0xcc, 0xb4, 0xcc, 0xd4, 0x22, 0xfd, 0xf4, 0x7c, 0x5d, 0xa4, 0x50, 0x2b,
	0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0xc7, 0x19, 0x8c, 0x3f, 0x18, 0x19, 0x93, 0xd8, 0xc0, 0xa1, 0x67,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x07, 0x45, 0x3f, 0x6d, 0x01, 0x00, 0x00,
}

func (m *TensorSliceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorSliceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Extent) > 0 {
		for _, msg := range m.Extent {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTensorSlice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TensorSliceProto_Extent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorSliceProto_Extent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTensorSlice(dAtA, i, uint64(m.Start))
	}
	if m.HasLength != nil {
		nn1, err := m.HasLength.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TensorSliceProto_Extent_Length) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintTensorSlice(dAtA, i, uint64(m.Length))
	return i, nil
}
func encodeVarintTensorSlice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TensorSliceProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Extent) > 0 {
		for _, e := range m.Extent {
			l = e.Size()
			n += 1 + l + sovTensorSlice(uint64(l))
		}
	}
	return n
}

func (m *TensorSliceProto_Extent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovTensorSlice(uint64(m.Start))
	}
	if m.HasLength != nil {
		n += m.HasLength.Size()
	}
	return n
}

func (m *TensorSliceProto_Extent_Length) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTensorSlice(uint64(m.Length))
	return n
}

func sovTensorSlice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTensorSlice(x uint64) (n int) {
	return sovTensorSlice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TensorSliceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorSliceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorSliceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extent = append(m.Extent, &TensorSliceProto_Extent{})
			if err := m.Extent[len(m.Extent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorSliceProto_Extent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLength = &TensorSliceProto_Extent_Length{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorSlice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTensorSlice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTensorSlice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTensorSlice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTensorSlice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorSlice   = fmt.Errorf("proto: integer overflow")
)
