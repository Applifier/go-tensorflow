// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/allocation_description.proto

/*
	Package framework is a generated protocol buffer package.

	It is generated from these files:
		tensorflow/core/framework/allocation_description.proto
		tensorflow/core/framework/api_def.proto
		tensorflow/core/framework/attr_value.proto
		tensorflow/core/framework/cost_graph.proto
		tensorflow/core/framework/device_attributes.proto
		tensorflow/core/framework/function.proto
		tensorflow/core/framework/graph.proto
		tensorflow/core/framework/graph_transfer_info.proto
		tensorflow/core/framework/iterator.proto
		tensorflow/core/framework/kernel_def.proto
		tensorflow/core/framework/log_memory.proto
		tensorflow/core/framework/node_def.proto
		tensorflow/core/framework/op_def.proto
		tensorflow/core/framework/reader_base.proto
		tensorflow/core/framework/remote_fused_graph_execute_info.proto
		tensorflow/core/framework/resource_handle.proto
		tensorflow/core/framework/step_stats.proto
		tensorflow/core/framework/summary.proto
		tensorflow/core/framework/tensor.proto
		tensorflow/core/framework/tensor_description.proto
		tensorflow/core/framework/tensor_shape.proto
		tensorflow/core/framework/tensor_slice.proto
		tensorflow/core/framework/types.proto
		tensorflow/core/framework/variable.proto
		tensorflow/core/framework/versions.proto

	It has these top-level messages:
		AllocationDescription
		ApiDef
		ApiDefs
		AttrValue
		NameAttrList
		CostGraphDef
		InterconnectLink
		LocalLinks
		DeviceLocality
		DeviceAttributes
		FunctionDefLibrary
		FunctionDef
		GradientDef
		GraphDef
		GraphTransferNodeInput
		GraphTransferNodeInfo
		GraphTransferConstNodeInfo
		GraphTransferNodeInputInfo
		GraphTransferNodeOutputInfo
		GraphTransferGraphInputNodeInfo
		GraphTransferGraphOutputNodeInfo
		GraphTransferInfo
		IteratorStateMetadata
		KernelDef
		KernelList
		MemoryLogStep
		MemoryLogTensorAllocation
		MemoryLogTensorDeallocation
		MemoryLogTensorOutput
		MemoryLogRawAllocation
		MemoryLogRawDeallocation
		NodeDef
		OpDef
		OpDeprecation
		OpList
		ReaderBaseState
		RemoteFusedGraphExecuteInfo
		ResourceHandleProto
		AllocationRecord
		AllocatorMemoryUsed
		NodeOutput
		MemoryStats
		NodeExecStats
		DeviceStepStats
		StepStats
		SummaryDescription
		HistogramProto
		SummaryMetadata
		Summary
		TensorProto
		VariantTensorDataProto
		TensorDescription
		TensorShapeProto
		TensorSliceProto
		VariableDef
		SaveSliceInfoDef
		VersionDef
*/
package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllocationDescription struct {
	// Total number of bytes requested
	RequestedBytes int64 `protobuf:"varint,1,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total number of bytes allocated if known
	AllocatedBytes int64 `protobuf:"varint,2,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	// Name of the allocator used
	AllocatorName string `protobuf:"bytes,3,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// Identifier of the allocated buffer if known
	AllocationId int64 `protobuf:"varint,4,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// Set if this tensor only has one remaining reference
	HasSingleReference bool `protobuf:"varint,5,opt,name=has_single_reference,json=hasSingleReference,proto3" json:"has_single_reference,omitempty"`
	// Address of the allocation.
	Ptr uint64 `protobuf:"varint,6,opt,name=ptr,proto3" json:"ptr,omitempty"`
}

func (m *AllocationDescription) Reset()         { *m = AllocationDescription{} }
func (m *AllocationDescription) String() string { return proto.CompactTextString(m) }
func (*AllocationDescription) ProtoMessage()    {}
func (*AllocationDescription) Descriptor() ([]byte, []int) {
	return fileDescriptorAllocationDescription, []int{0}
}

func (m *AllocationDescription) GetRequestedBytes() int64 {
	if m != nil {
		return m.RequestedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatedBytes() int64 {
	if m != nil {
		return m.AllocatedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocationDescription) GetAllocationId() int64 {
	if m != nil {
		return m.AllocationId
	}
	return 0
}

func (m *AllocationDescription) GetHasSingleReference() bool {
	if m != nil {
		return m.HasSingleReference
	}
	return false
}

func (m *AllocationDescription) GetPtr() uint64 {
	if m != nil {
		return m.Ptr
	}
	return 0
}

func init() {
	proto.RegisterType((*AllocationDescription)(nil), "tensorflow.AllocationDescription")
}
func (m *AllocationDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestedBytes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.RequestedBytes))
	}
	if m.AllocatedBytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocatedBytes))
	}
	if len(m.AllocatorName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(len(m.AllocatorName)))
		i += copy(dAtA[i:], m.AllocatorName)
	}
	if m.AllocationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocationId))
	}
	if m.HasSingleReference {
		dAtA[i] = 0x28
		i++
		if m.HasSingleReference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.Ptr))
	}
	return i, nil
}

func encodeVarintAllocationDescription(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllocationDescription) Size() (n int) {
	var l int
	_ = l
	if m.RequestedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.RequestedBytes))
	}
	if m.AllocatedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocatedBytes))
	}
	l = len(m.AllocatorName)
	if l > 0 {
		n += 1 + l + sovAllocationDescription(uint64(l))
	}
	if m.AllocationId != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocationId))
	}
	if m.HasSingleReference {
		n += 2
	}
	if m.Ptr != 0 {
		n += 1 + sovAllocationDescription(uint64(m.Ptr))
	}
	return n
}

func sovAllocationDescription(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAllocationDescription(x uint64) (n int) {
	return sovAllocationDescription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBytes", wireType)
			}
			m.RequestedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedBytes", wireType)
			}
			m.AllocatedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			m.AllocationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSingleReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSingleReference = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			m.Ptr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllocationDescription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocationDescription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAllocationDescription
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAllocationDescription
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAllocationDescription(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAllocationDescription = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocationDescription   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tensorflow/core/framework/allocation_description.proto", fileDescriptorAllocationDescription)
}

var fileDescriptorAllocationDescription = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0xbf, 0xf3, 0xb5, 0x16, 0x1d, 0xac, 0x4a, 0x50, 0x08, 0x08, 0x21, 0x28, 0x62, 0x36,
	0x26, 0x82, 0xe0, 0xbe, 0xc1, 0x8d, 0x1b, 0x29, 0x71, 0xe7, 0x26, 0x4c, 0x93, 0x93, 0x74, 0x30,
	0xc9, 0xc4, 0x33, 0x53, 0x4a, 0xef, 0xa2, 0x97, 0xe5, 0xd2, 0x4b, 0x90, 0x7a, 0x13, 0xba, 0x93,
	0xa4, 0x76, 0xd2, 0x85, 0xee, 0x0e, 0xcf, 0x79, 0xe6, 0x87, 0xf7, 0x65, 0xb7, 0x1a, 0x2b, 0x25,
	0x29, 0x2b, 0xe4, 0x3c, 0x48, 0x24, 0x61, 0x90, 0x11, 0x2f, 0x71, 0x2e, 0xe9, 0x39, 0xe0, 0x45,
	0x21, 0x13, 0xae, 0x85, 0xac, 0xe2, 0x14, 0x55, 0x42, 0xa2, 0x6e, 0x66, 0xbf, 0x26, 0xa9, 0xa5,
	0xc5, 0xba, 0x73, 0x67, 0x5f, 0xc0, 0x4e, 0x46, 0x46, 0xbe, 0xeb, 0x5c, 0xeb, 0x92, 0x1d, 0x12,
	0xbe, 0xcc, 0x50, 0x69, 0x4c, 0xe3, 0xc9, 0x42, 0xa3, 0xb2, 0xc1, 0x05, 0xaf, 0x17, 0x1d, 0x18,
	0x1c, 0x36, 0xb4, 0x11, 0x7f, 0x9e, 0x33, 0xe2, 0xff, 0xb5, 0x68, 0xf0, 0x5a, 0xbc, 0x60, 0x1b,
	0x22, 0x29, 0xae, 0x78, 0x89, 0x76, 0xcf, 0x05, 0x6f, 0x2f, 0x1a, 0x1a, 0xfa, 0xc0, 0x4b, 0xb4,
	0xce, 0xd9, 0x70, 0xeb, 0xfb, 0x22, 0xb5, 0xfb, 0xed, 0x6d, 0xfb, 0x1d, 0xbc, 0x4f, 0xad, 0x6b,
	0x76, 0x3c, 0xe5, 0x2a, 0x56, 0xa2, 0xca, 0x0b, 0x8c, 0x09, 0x33, 0x24, 0xac, 0x12, 0xb4, 0x77,
	0x5c, 0xf0, 0x76, 0x23, 0x6b, 0xca, 0xd5, 0x63, 0xbb, 0x8a, 0x36, 0x1b, 0xeb, 0x88, 0xf5, 0x6a,
	0x4d, 0xf6, 0xc0, 0x05, 0xaf, 0x1f, 0x35, 0x63, 0xb8, 0x84, 0xd7, 0x95, 0x03, 0x6f, 0x2b, 0x07,
	0xde, 0x57, 0x0e, 0x2c, 0x3f, 0x9c, 0x7f, 0xcc, 0x96, 0x94, 0xfb, 0x5d, 0x3c, 0xbe, 0x49, 0x34,
	0x3c, 0xfd, 0x35, 0xa5, 0x71, 0x13, 0xa8, 0x1a, 0xc3, 0x53, 0x98, 0x0b, 0x3d, 0x9d, 0x4d, 0xfc,
	0x44, 0x96, 0xc1, 0xa8, 0xae, 0x0b, 0x91, 0x09, 0xa4, 0x20, 0x97, 0x57, 0x5b, 0x1d, 0xe9, 0x45,
	0x8d, 0x2a, 0xf8, 0xb3, 0xb4, 0x4f, 0x80, 0xc9, 0xa0, 0x6d, 0xe8, 0xe6, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x45, 0xa7, 0xd2, 0xdb, 0x01, 0x00, 0x00,
}
