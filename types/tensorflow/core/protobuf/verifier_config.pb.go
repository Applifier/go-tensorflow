// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/verifier_config.proto

package core

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerifierConfig_Toggle int32

const (
	VerifierConfig_DEFAULT VerifierConfig_Toggle = 0
	VerifierConfig_ON      VerifierConfig_Toggle = 1
	VerifierConfig_OFF     VerifierConfig_Toggle = 2
)

var VerifierConfig_Toggle_name = map[int32]string{
	0: "DEFAULT",
	1: "ON",
	2: "OFF",
}

var VerifierConfig_Toggle_value = map[string]int32{
	"DEFAULT": 0,
	"ON":      1,
	"OFF":     2,
}

func (x VerifierConfig_Toggle) String() string {
	return proto.EnumName(VerifierConfig_Toggle_name, int32(x))
}

func (VerifierConfig_Toggle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5049fcf5d8bb3c3c, []int{0, 0}
}

// The config for graph verifiers.
type VerifierConfig struct {
	// Deadline for completion of all verification i.e. all the Toggle ON
	// verifiers must complete execution within this time.
	VerificationTimeoutInMs int64 `protobuf:"varint,1,opt,name=verification_timeout_in_ms,json=verificationTimeoutInMs,proto3" json:"verification_timeout_in_ms,omitempty"`
	// Perform structural validation on a tensorflow graph. Default is OFF.
	StructureVerifier VerifierConfig_Toggle `protobuf:"varint,2,opt,name=structure_verifier,json=structureVerifier,proto3,enum=tensorflow.VerifierConfig_Toggle" json:"structure_verifier,omitempty"`
}

func (m *VerifierConfig) Reset()         { *m = VerifierConfig{} }
func (m *VerifierConfig) String() string { return proto.CompactTextString(m) }
func (*VerifierConfig) ProtoMessage()    {}
func (*VerifierConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5049fcf5d8bb3c3c, []int{0}
}
func (m *VerifierConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifierConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifierConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifierConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifierConfig.Merge(m, src)
}
func (m *VerifierConfig) XXX_Size() int {
	return m.Size()
}
func (m *VerifierConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifierConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VerifierConfig proto.InternalMessageInfo

func (m *VerifierConfig) GetVerificationTimeoutInMs() int64 {
	if m != nil {
		return m.VerificationTimeoutInMs
	}
	return 0
}

func (m *VerifierConfig) GetStructureVerifier() VerifierConfig_Toggle {
	if m != nil {
		return m.StructureVerifier
	}
	return VerifierConfig_DEFAULT
}

func init() {
	proto.RegisterEnum("tensorflow.VerifierConfig_Toggle", VerifierConfig_Toggle_name, VerifierConfig_Toggle_value)
	proto.RegisterType((*VerifierConfig)(nil), "tensorflow.VerifierConfig")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/verifier_config.proto", fileDescriptor_5049fcf5d8bb3c3c)
}

var fileDescriptor_5049fcf5d8bb3c3c = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4b, 0xf3, 0x40,
	0x1c, 0xc6, 0xf3, 0x6f, 0xa1, 0x85, 0x7b, 0xa1, 0xf4, 0x3d, 0x04, 0x8b, 0xc3, 0x51, 0x3b, 0x48,
	0x17, 0x73, 0xa0, 0x8b, 0xe0, 0xd4, 0xaa, 0x05, 0x41, 0x6d, 0x29, 0xd5, 0xc1, 0x25, 0xb4, 0xe1,
	0x72, 0x1e, 0x26, 0xf9, 0x87, 0xbb, 0x8b, 0xc5, 0x4f, 0xe0, 0xea, 0xb7, 0xd2, 0xb1, 0xa3, 0xa3,
	0x24, 0x5f, 0xc2, 0x51, 0x4c, 0xac, 0xa6, 0xce, 0xcf, 0xef, 0xe1, 0x79, 0xf8, 0x11, 0xd7, 0x8a,
	0xd8, 0xa0, 0x0e, 0x42, 0x5c, 0x72, 0x1f, 0xb5, 0xe0, 0x89, 0x46, 0x8b, 0x8b, 0x34, 0xe0, 0x0f,
	0x42, 0xab, 0x40, 0x09, 0xed, 0xf9, 0x18, 0x07, 0x4a, 0xba, 0x45, 0x40, 0xc9, 0x2f, 0xdf, 0x7b,
	0x01, 0xd2, 0xba, 0xf9, 0xa6, 0x4e, 0x0a, 0x88, 0x1e, 0x93, 0x9d, 0xb2, 0xe7, 0xcf, 0xad, 0xc2,
	0xd8, 0xb3, 0x2a, 0x12, 0x98, 0x5a, 0x4f, 0xc5, 0x5e, 0x64, 0x3a, 0xd0, 0x85, 0x7e, 0x7d, 0xba,
	0x5d, 0x25, 0x66, 0x25, 0x70, 0x1e, 0x5f, 0x1a, 0x3a, 0x21, 0xd4, 0x58, 0x9d, 0xfa, 0x36, 0xd5,
	0xc2, 0x5b, 0xcf, 0x77, 0x6a, 0x5d, 0xe8, 0xb7, 0x0e, 0x76, 0x2b, 0x47, 0xdd, 0xcd, 0x51, 0x77,
	0x86, 0x52, 0x86, 0x62, 0xfa, 0xff, 0xa7, 0xbc, 0xce, 0x7b, 0x7b, 0xa4, 0x51, 0x86, 0xf4, 0x1f,
	0x69, 0x9e, 0x9e, 0x8d, 0x06, 0xd7, 0x17, 0xb3, 0xb6, 0x43, 0x1b, 0xa4, 0x36, 0xbe, 0x6a, 0x03,
	0x6d, 0x92, 0xfa, 0x78, 0x34, 0x6a, 0xd7, 0x86, 0x4f, 0xf0, 0x9a, 0x31, 0x58, 0x65, 0x0c, 0xde,
	0x33, 0x06, 0xcf, 0x39, 0x73, 0x56, 0x39, 0x73, 0xde, 0x72, 0xe6, 0x90, 0x0e, 0x6a, 0x59, 0xdd,
	0x0e, 0xf4, 0x3c, 0x12, 0x4b, 0xd4, 0xf7, 0xc3, 0xad, 0xcd, 0x1b, 0x93, 0x2f, 0x3f, 0x66, 0x02,
	0xb7, 0x47, 0x52, 0xd9, 0xbb, 0x74, 0xe1, 0xfa, 0x18, 0xf1, 0x41, 0x92, 0x84, 0x05, 0xc3, 0x25,
	0xee, 0x57, 0x54, 0xdb, 0xc7, 0x44, 0x18, 0xfe, 0xc7, 0xfd, 0x07, 0xc0, 0xa2, 0x51, 0x68, 0x3e,
	0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xea, 0x8f, 0xbd, 0x47, 0x98, 0x01, 0x00, 0x00,
}

func (m *VerifierConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifierConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifierConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructureVerifier != 0 {
		i = encodeVarintVerifierConfig(dAtA, i, uint64(m.StructureVerifier))
		i--
		dAtA[i] = 0x10
	}
	if m.VerificationTimeoutInMs != 0 {
		i = encodeVarintVerifierConfig(dAtA, i, uint64(m.VerificationTimeoutInMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVerifierConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerifierConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerifierConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerificationTimeoutInMs != 0 {
		n += 1 + sovVerifierConfig(uint64(m.VerificationTimeoutInMs))
	}
	if m.StructureVerifier != 0 {
		n += 1 + sovVerifierConfig(uint64(m.StructureVerifier))
	}
	return n
}

func sovVerifierConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerifierConfig(x uint64) (n int) {
	return sovVerifierConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerifierConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifierConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifierConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifierConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationTimeoutInMs", wireType)
			}
			m.VerificationTimeoutInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationTimeoutInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructureVerifier", wireType)
			}
			m.StructureVerifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StructureVerifier |= VerifierConfig_Toggle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVerifierConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifierConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifierConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerifierConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerifierConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifierConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifierConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerifierConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerifierConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerifierConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerifierConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerifierConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerifierConfig = fmt.Errorf("proto: unexpected end of group")
)
