// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/prediction_log.proto

package tensorflow_serving

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ClassifyLog struct {
	Request  *ClassificationRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *ClassificationResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ClassifyLog) Reset()         { *m = ClassifyLog{} }
func (m *ClassifyLog) String() string { return proto.CompactTextString(m) }
func (*ClassifyLog) ProtoMessage()    {}
func (*ClassifyLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{0}
}
func (m *ClassifyLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassifyLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassifyLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassifyLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassifyLog.Merge(m, src)
}
func (m *ClassifyLog) XXX_Size() int {
	return m.Size()
}
func (m *ClassifyLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassifyLog.DiscardUnknown(m)
}

var xxx_messageInfo_ClassifyLog proto.InternalMessageInfo

func (m *ClassifyLog) GetRequest() *ClassificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ClassifyLog) GetResponse() *ClassificationResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RegressLog struct {
	Request  *RegressionRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *RegressionResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *RegressLog) Reset()         { *m = RegressLog{} }
func (m *RegressLog) String() string { return proto.CompactTextString(m) }
func (*RegressLog) ProtoMessage()    {}
func (*RegressLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{1}
}
func (m *RegressLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegressLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegressLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegressLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegressLog.Merge(m, src)
}
func (m *RegressLog) XXX_Size() int {
	return m.Size()
}
func (m *RegressLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RegressLog.DiscardUnknown(m)
}

var xxx_messageInfo_RegressLog proto.InternalMessageInfo

func (m *RegressLog) GetRequest() *RegressionRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RegressLog) GetResponse() *RegressionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PredictLog struct {
	Request  *PredictRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *PredictResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *PredictLog) Reset()         { *m = PredictLog{} }
func (m *PredictLog) String() string { return proto.CompactTextString(m) }
func (*PredictLog) ProtoMessage()    {}
func (*PredictLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{2}
}
func (m *PredictLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredictLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredictLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredictLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictLog.Merge(m, src)
}
func (m *PredictLog) XXX_Size() int {
	return m.Size()
}
func (m *PredictLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictLog.DiscardUnknown(m)
}

var xxx_messageInfo_PredictLog proto.InternalMessageInfo

func (m *PredictLog) GetRequest() *PredictRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PredictLog) GetResponse() *PredictResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MultiInferenceLog struct {
	Request  *MultiInferenceRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *MultiInferenceResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *MultiInferenceLog) Reset()         { *m = MultiInferenceLog{} }
func (m *MultiInferenceLog) String() string { return proto.CompactTextString(m) }
func (*MultiInferenceLog) ProtoMessage()    {}
func (*MultiInferenceLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{3}
}
func (m *MultiInferenceLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiInferenceLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiInferenceLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiInferenceLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiInferenceLog.Merge(m, src)
}
func (m *MultiInferenceLog) XXX_Size() int {
	return m.Size()
}
func (m *MultiInferenceLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiInferenceLog.DiscardUnknown(m)
}

var xxx_messageInfo_MultiInferenceLog proto.InternalMessageInfo

func (m *MultiInferenceLog) GetRequest() *MultiInferenceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *MultiInferenceLog) GetResponse() *MultiInferenceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SessionRunLog struct {
	Request  *SessionRunRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *SessionRunResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *SessionRunLog) Reset()         { *m = SessionRunLog{} }
func (m *SessionRunLog) String() string { return proto.CompactTextString(m) }
func (*SessionRunLog) ProtoMessage()    {}
func (*SessionRunLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{4}
}
func (m *SessionRunLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRunLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRunLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRunLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRunLog.Merge(m, src)
}
func (m *SessionRunLog) XXX_Size() int {
	return m.Size()
}
func (m *SessionRunLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRunLog.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRunLog proto.InternalMessageInfo

func (m *SessionRunLog) GetRequest() *SessionRunRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SessionRunLog) GetResponse() *SessionRunResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Logged model inference request.
type PredictionLog struct {
	LogMetadata *LogMetadata `protobuf:"bytes,1,opt,name=log_metadata,json=logMetadata,proto3" json:"log_metadata,omitempty"`
	// Types that are valid to be assigned to LogType:
	//	*PredictionLog_ClassifyLog
	//	*PredictionLog_RegressLog
	//	*PredictionLog_PredictLog
	//	*PredictionLog_MultiInferenceLog
	//	*PredictionLog_SessionRunLog
	LogType isPredictionLog_LogType `protobuf_oneof:"log_type"`
}

func (m *PredictionLog) Reset()         { *m = PredictionLog{} }
func (m *PredictionLog) String() string { return proto.CompactTextString(m) }
func (*PredictionLog) ProtoMessage()    {}
func (*PredictionLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_efdf6e97c18a73fa, []int{5}
}
func (m *PredictionLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredictionLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredictionLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredictionLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictionLog.Merge(m, src)
}
func (m *PredictionLog) XXX_Size() int {
	return m.Size()
}
func (m *PredictionLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictionLog.DiscardUnknown(m)
}

var xxx_messageInfo_PredictionLog proto.InternalMessageInfo

type isPredictionLog_LogType interface {
	isPredictionLog_LogType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PredictionLog_ClassifyLog struct {
	ClassifyLog *ClassifyLog `protobuf:"bytes,2,opt,name=classify_log,json=classifyLog,proto3,oneof"`
}
type PredictionLog_RegressLog struct {
	RegressLog *RegressLog `protobuf:"bytes,3,opt,name=regress_log,json=regressLog,proto3,oneof"`
}
type PredictionLog_PredictLog struct {
	PredictLog *PredictLog `protobuf:"bytes,6,opt,name=predict_log,json=predictLog,proto3,oneof"`
}
type PredictionLog_MultiInferenceLog struct {
	MultiInferenceLog *MultiInferenceLog `protobuf:"bytes,4,opt,name=multi_inference_log,json=multiInferenceLog,proto3,oneof"`
}
type PredictionLog_SessionRunLog struct {
	SessionRunLog *SessionRunLog `protobuf:"bytes,5,opt,name=session_run_log,json=sessionRunLog,proto3,oneof"`
}

func (*PredictionLog_ClassifyLog) isPredictionLog_LogType()       {}
func (*PredictionLog_RegressLog) isPredictionLog_LogType()        {}
func (*PredictionLog_PredictLog) isPredictionLog_LogType()        {}
func (*PredictionLog_MultiInferenceLog) isPredictionLog_LogType() {}
func (*PredictionLog_SessionRunLog) isPredictionLog_LogType()     {}

func (m *PredictionLog) GetLogType() isPredictionLog_LogType {
	if m != nil {
		return m.LogType
	}
	return nil
}

func (m *PredictionLog) GetLogMetadata() *LogMetadata {
	if m != nil {
		return m.LogMetadata
	}
	return nil
}

func (m *PredictionLog) GetClassifyLog() *ClassifyLog {
	if x, ok := m.GetLogType().(*PredictionLog_ClassifyLog); ok {
		return x.ClassifyLog
	}
	return nil
}

func (m *PredictionLog) GetRegressLog() *RegressLog {
	if x, ok := m.GetLogType().(*PredictionLog_RegressLog); ok {
		return x.RegressLog
	}
	return nil
}

func (m *PredictionLog) GetPredictLog() *PredictLog {
	if x, ok := m.GetLogType().(*PredictionLog_PredictLog); ok {
		return x.PredictLog
	}
	return nil
}

func (m *PredictionLog) GetMultiInferenceLog() *MultiInferenceLog {
	if x, ok := m.GetLogType().(*PredictionLog_MultiInferenceLog); ok {
		return x.MultiInferenceLog
	}
	return nil
}

func (m *PredictionLog) GetSessionRunLog() *SessionRunLog {
	if x, ok := m.GetLogType().(*PredictionLog_SessionRunLog); ok {
		return x.SessionRunLog
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PredictionLog) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PredictionLog_OneofMarshaler, _PredictionLog_OneofUnmarshaler, _PredictionLog_OneofSizer, []interface{}{
		(*PredictionLog_ClassifyLog)(nil),
		(*PredictionLog_RegressLog)(nil),
		(*PredictionLog_PredictLog)(nil),
		(*PredictionLog_MultiInferenceLog)(nil),
		(*PredictionLog_SessionRunLog)(nil),
	}
}

func _PredictionLog_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PredictionLog)
	// log_type
	switch x := m.LogType.(type) {
	case *PredictionLog_ClassifyLog:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassifyLog); err != nil {
			return err
		}
	case *PredictionLog_RegressLog:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegressLog); err != nil {
			return err
		}
	case *PredictionLog_PredictLog:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PredictLog); err != nil {
			return err
		}
	case *PredictionLog_MultiInferenceLog:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiInferenceLog); err != nil {
			return err
		}
	case *PredictionLog_SessionRunLog:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionRunLog); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PredictionLog.LogType has unexpected type %T", x)
	}
	return nil
}

func _PredictionLog_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PredictionLog)
	switch tag {
	case 2: // log_type.classify_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClassifyLog)
		err := b.DecodeMessage(msg)
		m.LogType = &PredictionLog_ClassifyLog{msg}
		return true, err
	case 3: // log_type.regress_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegressLog)
		err := b.DecodeMessage(msg)
		m.LogType = &PredictionLog_RegressLog{msg}
		return true, err
	case 6: // log_type.predict_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PredictLog)
		err := b.DecodeMessage(msg)
		m.LogType = &PredictionLog_PredictLog{msg}
		return true, err
	case 4: // log_type.multi_inference_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiInferenceLog)
		err := b.DecodeMessage(msg)
		m.LogType = &PredictionLog_MultiInferenceLog{msg}
		return true, err
	case 5: // log_type.session_run_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionRunLog)
		err := b.DecodeMessage(msg)
		m.LogType = &PredictionLog_SessionRunLog{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PredictionLog_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PredictionLog)
	// log_type
	switch x := m.LogType.(type) {
	case *PredictionLog_ClassifyLog:
		s := proto.Size(x.ClassifyLog)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PredictionLog_RegressLog:
		s := proto.Size(x.RegressLog)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PredictionLog_PredictLog:
		s := proto.Size(x.PredictLog)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PredictionLog_MultiInferenceLog:
		s := proto.Size(x.MultiInferenceLog)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PredictionLog_SessionRunLog:
		s := proto.Size(x.SessionRunLog)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ClassifyLog)(nil), "tensorflow.serving.ClassifyLog")
	proto.RegisterType((*RegressLog)(nil), "tensorflow.serving.RegressLog")
	proto.RegisterType((*PredictLog)(nil), "tensorflow.serving.PredictLog")
	proto.RegisterType((*MultiInferenceLog)(nil), "tensorflow.serving.MultiInferenceLog")
	proto.RegisterType((*SessionRunLog)(nil), "tensorflow.serving.SessionRunLog")
	proto.RegisterType((*PredictionLog)(nil), "tensorflow.serving.PredictionLog")
}

func init() {
	proto.RegisterFile("tensorflow_serving/prediction_log.proto", fileDescriptor_efdf6e97c18a73fa)
}

var fileDescriptor_efdf6e97c18a73fa = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x77, 0xac, 0xd6, 0xf2, 0x6e, 0x83, 0x74, 0xbd, 0x84, 0x0a, 0xdb, 0x9a, 0xa2, 0x56,
	0x0f, 0x11, 0xf4, 0x2a, 0x94, 0x26, 0x22, 0x15, 0x5b, 0x28, 0xeb, 0xc1, 0x63, 0x58, 0xb7, 0x93,
	0x61, 0x60, 0x33, 0xb3, 0xce, 0x4c, 0x94, 0x7c, 0x06, 0x2f, 0x0a, 0x9e, 0x3c, 0xf9, 0x71, 0x3c,
	0xd6, 0x9b, 0x47, 0x49, 0xbe, 0x84, 0x47, 0x99, 0x3f, 0xd9, 0x4d, 0x33, 0x9b, 0x35, 0xf4, 0x98,
	0xf0, 0x3c, 0xbf, 0x7d, 0x66, 0x9e, 0x77, 0x5e, 0x78, 0xa4, 0x30, 0x93, 0x5c, 0x0c, 0x73, 0xfe,
	0x69, 0x20, 0xb1, 0xf8, 0x48, 0x19, 0x79, 0x5a, 0x08, 0x7c, 0x41, 0x33, 0x45, 0x39, 0x1b, 0xe4,
	0x9c, 0x74, 0x0b, 0xc1, 0x15, 0x8f, 0xa2, 0x4a, 0xd8, 0x75, 0xc2, 0xdd, 0x3a, 0x73, 0x96, 0xa7,
	0x52, 0xd2, 0x21, 0xcd, 0x52, 0x0d, 0xb0, 0xe6, 0xdd, 0x4e, 0x8d, 0x90, 0xb2, 0x21, 0x16, 0x98,
	0x65, 0xd8, 0x69, 0xf6, 0x57, 0x27, 0x71, 0x8a, 0x83, 0x1a, 0x85, 0xc0, 0x44, 0x60, 0x29, 0xab,
	0x4f, 0x1d, 0xd6, 0x88, 0xa4, 0x55, 0xd8, 0xdf, 0x8d, 0x1f, 0xcc, 0x39, 0x21, 0x94, 0xb9, 0x33,
	0x77, 0xbe, 0x23, 0x08, 0xfb, 0xf6, 0x3c, 0x93, 0x53, 0x4e, 0xa2, 0x3e, 0xdc, 0x16, 0xf8, 0xc3,
	0x18, 0x4b, 0xd5, 0x46, 0xfb, 0xe8, 0x30, 0x7c, 0xf6, 0xb8, 0xeb, 0xdf, 0x4a, 0xb7, 0x7f, 0xe5,
	0x06, 0x12, 0x6b, 0x48, 0xe6, 0xce, 0xe8, 0x15, 0x6c, 0x09, 0x2c, 0x0b, 0xce, 0x24, 0x6e, 0xdf,
	0x30, 0x94, 0x27, 0xeb, 0x50, 0xac, 0x23, 0x29, 0xbd, 0x9d, 0xaf, 0x08, 0x20, 0xb1, 0xa7, 0xd7,
	0xd9, 0x8e, 0x96, 0xb3, 0x3d, 0xa8, 0xa3, 0x26, 0xe5, 0x75, 0x79, 0xb9, 0x7a, 0x5e, 0xae, 0x87,
	0xff, 0x23, 0x78, 0x99, 0x3e, 0x23, 0x80, 0x73, 0xdb, 0x99, 0xce, 0xf4, 0x62, 0x39, 0x53, 0xa7,
	0x8e, 0xe8, 0x0c, 0x5e, 0xa0, 0x23, 0x2f, 0xd0, 0x41, 0xa3, 0xdd, 0x4b, 0xf3, 0x03, 0xc1, 0xce,
	0xd9, 0x38, 0x57, 0xf4, 0xf5, 0x7c, 0xd4, 0xd6, 0x2f, 0xf1, 0xaa, 0xef, 0xba, 0x25, 0x2e, 0x53,
	0xbc, 0x88, 0xdf, 0x10, 0xb4, 0xde, 0xba, 0xeb, 0x1c, 0xb3, 0xf5, 0x7b, 0xac, 0x3c, 0xd7, 0xed,
	0x71, 0x91, 0xe0, 0xc5, 0xfa, 0xb5, 0x01, 0xad, 0xf3, 0x72, 0x0b, 0xe8, 0x58, 0x3d, 0xd8, 0xce,
	0x39, 0x19, 0x8c, 0xb0, 0x4a, 0x2f, 0x52, 0x95, 0xba, 0x6c, 0x7b, 0x75, 0xe4, 0x53, 0x4e, 0xce,
	0x9c, 0x2c, 0x09, 0xf3, 0xea, 0x47, 0xf4, 0x12, 0xb6, 0xdd, 0x76, 0x98, 0xe8, 0xc5, 0xe2, 0xd2,
	0xed, 0x35, 0x4c, 0xbf, 0x7e, 0x75, 0x27, 0x41, 0x12, 0x66, 0x0b, 0x8f, 0xf0, 0x18, 0x42, 0xf7,
	0xe8, 0x0d, 0x64, 0xc3, 0x40, 0xe2, 0x86, 0x51, 0xb5, 0x0c, 0x10, 0xd5, 0x5b, 0x39, 0x86, 0xd0,
	0x6d, 0x16, 0x83, 0xd8, 0x5c, 0x8d, 0xa8, 0x86, 0x59, 0x23, 0x8a, 0x6a, 0xb4, 0xdf, 0xc1, 0xdd,
	0x91, 0x2e, 0x77, 0x50, 0xae, 0x31, 0x83, 0xba, 0xb9, 0xba, 0x32, 0x6f, 0x12, 0x4f, 0x82, 0x64,
	0x67, 0xe4, 0x8d, 0xe7, 0x1b, 0xb8, 0x33, 0x5f, 0x57, 0x62, 0x6c, 0x16, 0x70, 0xfb, 0x96, 0x81,
	0xde, 0x6f, 0x6e, 0xd1, 0x02, 0x5b, 0x72, 0xf1, 0x8f, 0x1e, 0xc0, 0x96, 0x6e, 0x4d, 0x4d, 0x0a,
	0xdc, 0xbb, 0xf7, 0x73, 0x1a, 0xa3, 0xcb, 0x69, 0x8c, 0xfe, 0x4c, 0x63, 0xf4, 0x65, 0x16, 0x07,
	0x97, 0xb3, 0x38, 0xf8, 0x3d, 0x8b, 0x83, 0xbf, 0x08, 0xbd, 0xdf, 0x34, 0x0b, 0xef, 0xf9, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0xe8, 0x07, 0xa6, 0x0f, 0x06, 0x00, 0x00,
}

func (m *ClassifyLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassifyLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Request.Size()))
		n1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Response.Size()))
		n2, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RegressLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Request.Size()))
		n3, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Response.Size()))
		n4, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PredictLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Request.Size()))
		n5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Response.Size()))
		n6, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MultiInferenceLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiInferenceLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Request.Size()))
		n7, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Response.Size()))
		n8, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *SessionRunLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRunLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Request.Size()))
		n9, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.Response.Size()))
		n10, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *PredictionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogMetadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.LogMetadata.Size()))
		n11, err := m.LogMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.LogType != nil {
		nn12, err := m.LogType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *PredictionLog_ClassifyLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClassifyLog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.ClassifyLog.Size()))
		n13, err := m.ClassifyLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *PredictionLog_RegressLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegressLog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.RegressLog.Size()))
		n14, err := m.RegressLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *PredictionLog_MultiInferenceLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultiInferenceLog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.MultiInferenceLog.Size()))
		n15, err := m.MultiInferenceLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *PredictionLog_SessionRunLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionRunLog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.SessionRunLog.Size()))
		n16, err := m.SessionRunLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *PredictionLog_PredictLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PredictLog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPredictionLog(dAtA, i, uint64(m.PredictLog.Size()))
		n17, err := m.PredictLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func encodeVarintPredictionLog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClassifyLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func (m *RegressLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func (m *PredictLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func (m *MultiInferenceLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func (m *SessionRunLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func (m *PredictionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogMetadata != nil {
		l = m.LogMetadata.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	if m.LogType != nil {
		n += m.LogType.Size()
	}
	return n
}

func (m *PredictionLog_ClassifyLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassifyLog != nil {
		l = m.ClassifyLog.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}
func (m *PredictionLog_RegressLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegressLog != nil {
		l = m.RegressLog.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}
func (m *PredictionLog_MultiInferenceLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiInferenceLog != nil {
		l = m.MultiInferenceLog.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}
func (m *PredictionLog_SessionRunLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionRunLog != nil {
		l = m.SessionRunLog.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}
func (m *PredictionLog_PredictLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PredictLog != nil {
		l = m.PredictLog.Size()
		n += 1 + l + sovPredictionLog(uint64(l))
	}
	return n
}

func sovPredictionLog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPredictionLog(x uint64) (n int) {
	return sovPredictionLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassifyLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassifyLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassifyLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ClassificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &ClassificationResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RegressionRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &RegressionResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PredictRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &PredictResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiInferenceLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiInferenceLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiInferenceLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &MultiInferenceRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &MultiInferenceResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRunLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRunLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRunLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SessionRunRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &SessionRunResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogMetadata == nil {
				m.LogMetadata = &LogMetadata{}
			}
			if err := m.LogMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassifyLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClassifyLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogType = &PredictionLog_ClassifyLog{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegressLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegressLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogType = &PredictionLog_RegressLog{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiInferenceLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiInferenceLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogType = &PredictionLog_MultiInferenceLog{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionRunLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionRunLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogType = &PredictionLog_SessionRunLog{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictionLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PredictLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogType = &PredictionLog_PredictLog{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictionLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredictionLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredictionLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictionLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPredictionLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPredictionLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPredictionLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPredictionLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredictionLog   = fmt.Errorf("proto: integer overflow")
)
