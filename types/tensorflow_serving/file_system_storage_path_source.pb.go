// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/file_system_storage_path_source.proto

package tensorflow_serving

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Config proto for FileSystemStoragePathSource.
type FileSystemStoragePathSourceConfig struct {
	// The servables to monitor for new versions, and aspire.
	Servables []*FileSystemStoragePathSourceConfig_ServableToMonitor `protobuf:"bytes,5,rep,name=servables,proto3" json:"servables,omitempty"`
	// A single servable name/base_path pair to monitor.
	// DEPRECATED: Use 'servables' instead.
	// TODO(b/30898016): Stop using these fields, and ultimately remove them here.
	ServableName string `protobuf:"bytes,1,opt,name=servable_name,json=servableName,proto3" json:"servable_name,omitempty"` // Deprecated: Do not use.
	BasePath     string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`             // Deprecated: Do not use.
	// How long to wait between file-system polling to look for children of
	// 'base_path', in seconds.
	//
	// If set to zero, filesystem will be polled exactly once. If set to a
	// negative value (for testing use only), polling will be entirely disabled.
	FileSystemPollWaitSeconds int64 `protobuf:"varint,3,opt,name=file_system_poll_wait_seconds,json=fileSystemPollWaitSeconds,proto3" json:"file_system_poll_wait_seconds,omitempty"`
	// If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
	// fail if, for any configured servables, the file system doesn't currently
	// contain at least one version under the base path.
	// (Otherwise, it will emit a warning and keep pinging the file system to
	// check for a version to appear later.)
	// DEPRECATED: Use 'servable_versions_always_present' instead, which includes
	// this behavior.
	// TODO(b/30898016): Remove 2019-10-31 or later.
	FailIfZeroVersionsAtStartup bool `protobuf:"varint,4,opt,name=fail_if_zero_versions_at_startup,json=failIfZeroVersionsAtStartup,proto3" json:"fail_if_zero_versions_at_startup,omitempty"` // Deprecated: Do not use.
	// If true, the servable is always expected to exist on the underlying
	// filesystem. FileSystemStoragePathSource::Create() and ::UpdateConfig() will
	// fail if, for any configured servables, the file system doesn't currently
	// contain at least one version under the base path. In addition, if a polling
	// loop find the base path empty, it will not unload existing servables.
	ServableVersionsAlwaysPresent bool `protobuf:"varint,6,opt,name=servable_versions_always_present,json=servableVersionsAlwaysPresent,proto3" json:"servable_versions_always_present,omitempty"`
}

func (m *FileSystemStoragePathSourceConfig) Reset()         { *m = FileSystemStoragePathSourceConfig{} }
func (m *FileSystemStoragePathSourceConfig) String() string { return proto.CompactTextString(m) }
func (*FileSystemStoragePathSourceConfig) ProtoMessage()    {}
func (*FileSystemStoragePathSourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0}
}
func (m *FileSystemStoragePathSourceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig) GetServables() []*FileSystemStoragePathSourceConfig_ServableToMonitor {
	if m != nil {
		return m.Servables
	}
	return nil
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetServableName() string {
	if m != nil {
		return m.ServableName
	}
	return ""
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig) GetFileSystemPollWaitSeconds() int64 {
	if m != nil {
		return m.FileSystemPollWaitSeconds
	}
	return 0
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetFailIfZeroVersionsAtStartup() bool {
	if m != nil {
		return m.FailIfZeroVersionsAtStartup
	}
	return false
}

func (m *FileSystemStoragePathSourceConfig) GetServableVersionsAlwaysPresent() bool {
	if m != nil {
		return m.ServableVersionsAlwaysPresent
	}
	return false
}

// A policy that dictates which version(s) of a servable should be served.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy struct {
	// Types that are valid to be assigned to PolicyChoice:
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_
	PolicyChoice isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice `protobuf_oneof:"policy_choice"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0, 0}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy proto.InternalMessageInfo

type isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice interface {
	isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_ struct {
	Latest *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest `protobuf:"bytes,100,opt,name=latest,proto3,oneof" json:"latest,omitempty"`
}
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_ struct {
	All *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All `protobuf:"bytes,101,opt,name=all,proto3,oneof" json:"all,omitempty"`
}
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_ struct {
	Specific *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific `protobuf:"bytes,102,opt,name=specific,proto3,oneof" json:"specific,omitempty"`
}

func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetPolicyChoice() isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetLatest() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_); ok {
		return x.Latest
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetAll() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_); ok {
		return x.All
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetSpecific() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_); ok {
		return x.Specific
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_)(nil),
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_)(nil),
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_)(nil),
	}
}

// Serve the latest versions (i.e. the ones with the highest version
// numbers), among those found on disk.
//
// This is the default policy, with the default number of versions as 1.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest struct {
	// Number of latest versions to serve. (The default is 1.)
	NumVersions uint32 `protobuf:"varint,1,opt,name=num_versions,json=numVersions,proto3" json:"num_versions,omitempty"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0, 0, 0}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) GetNumVersions() uint32 {
	if m != nil {
		return m.NumVersions
	}
	return 0
}

// Serve all versions found on disk.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_All struct {
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_All{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0, 0, 1}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All proto.InternalMessageInfo

// Serve a specific version (or set of versions).
//
// This policy is useful for rolling back to a specific version, or for
// canarying a specific version while still serving a separate stable
// version.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific struct {
	// The version numbers to serve.
	Versions []int64 `protobuf:"varint,1,rep,packed,name=versions,proto3" json:"versions,omitempty"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0, 0, 2}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) GetVersions() []int64 {
	if m != nil {
		return m.Versions
	}
	return nil
}

// A servable name and base path to look for versions of the servable.
type FileSystemStoragePathSourceConfig_ServableToMonitor struct {
	// The servable name to supply in aspired-versions callback calls. Child
	// paths of 'base_path' are considered to be versions of this servable.
	ServableName string `protobuf:"bytes,1,opt,name=servable_name,json=servableName,proto3" json:"servable_name,omitempty"`
	// The path to monitor, i.e. look for child paths of the form base_path/123.
	BasePath string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// The policy to determines the number of versions of the servable to be
	// served at the same time.
	ServableVersionPolicy *FileSystemStoragePathSourceConfig_ServableVersionPolicy `protobuf:"bytes,4,opt,name=servable_version_policy,json=servableVersionPolicy,proto3" json:"servable_version_policy,omitempty"`
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableToMonitor{}
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableToMonitor) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableToMonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0f33e50a146036d, []int{0, 1}
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Size() int {
	return m.Size()
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetServableName() string {
	if m != nil {
		return m.ServableName
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetServableVersionPolicy() *FileSystemStoragePathSourceConfig_ServableVersionPolicy {
	if m != nil {
		return m.ServableVersionPolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*FileSystemStoragePathSourceConfig)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableToMonitor)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor")
}

func init() {
	proto.RegisterFile("tensorflow_serving/file_system_storage_path_source.proto", fileDescriptor_f0f33e50a146036d)
}

var fileDescriptor_f0f33e50a146036d = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x1c, 0xc5, 0x93, 0x65, 0xab, 0x52, 0x77, 0x15, 0x60, 0x69, 0x22, 0x64, 0x5a, 0xc8, 0x40, 0x82,
	0x48, 0x48, 0x41, 0x2a, 0x17, 0x8e, 0xb4, 0x48, 0xac, 0xe3, 0x67, 0x95, 0x4c, 0x20, 0x71, 0xb1,
	0xdc, 0xcc, 0x69, 0x2d, 0xb9, 0x71, 0x64, 0xbb, 0xab, 0xca, 0x95, 0x7f, 0x80, 0x3f, 0x0b, 0x89,
	0xcb, 0x8e, 0x1c, 0x38, 0x40, 0xfb, 0x8f, 0xa0, 0x38, 0x6d, 0xda, 0xad, 0x93, 0x38, 0xd0, 0xa3,
	0xdd, 0xf7, 0x3e, 0xaf, 0xf6, 0xf7, 0x39, 0xe0, 0xb9, 0x22, 0x99, 0xe4, 0x22, 0x65, 0x7c, 0x82,
	0x24, 0x11, 0x17, 0x34, 0x1b, 0x3c, 0x4d, 0x29, 0x23, 0x48, 0x4e, 0xa5, 0x22, 0x23, 0x24, 0x15,
	0x17, 0x78, 0x40, 0x50, 0x8e, 0xd5, 0x10, 0x49, 0x3e, 0x16, 0x09, 0x09, 0x73, 0xc1, 0x15, 0x87,
	0x70, 0xe5, 0x0c, 0x17, 0xce, 0x07, 0xbf, 0x6c, 0x70, 0xfc, 0x8a, 0x32, 0x12, 0x6b, 0x73, 0x5c,
	0x7a, 0x7b, 0x58, 0x0d, 0x63, 0xed, 0x7c, 0xc9, 0xb3, 0x94, 0x0e, 0x20, 0x01, 0xf5, 0xc2, 0x80,
	0xfb, 0x8c, 0x48, 0x67, 0xcf, 0xb7, 0x82, 0x46, 0xeb, 0x24, 0xdc, 0xa4, 0x85, 0xff, 0x24, 0x85,
	0xf1, 0x02, 0x73, 0xc6, 0xdf, 0xf1, 0x8c, 0x2a, 0x2e, 0xa2, 0x15, 0x19, 0x3e, 0x06, 0xcd, 0xe5,
	0x02, 0x65, 0x78, 0x44, 0x1c, 0xd3, 0x37, 0x83, 0x7a, 0x67, 0xc7, 0x31, 0xa3, 0xfd, 0xe5, 0x0f,
	0xef, 0xf1, 0x88, 0xc0, 0xfb, 0xa0, 0xde, 0xc7, 0xb2, 0x3c, 0xa3, 0xb3, 0x53, 0x89, 0xec, 0x62,
	0xb3, 0x88, 0x84, 0x2f, 0xc0, 0xd1, 0xfa, 0x9d, 0xe4, 0x9c, 0x31, 0x34, 0xc1, 0x54, 0x21, 0x49,
	0x12, 0x9e, 0x9d, 0x4b, 0xc7, 0xf2, 0xcd, 0xc0, 0x8a, 0xee, 0xa5, 0xd5, 0x1f, 0xee, 0x71, 0xc6,
	0x3e, 0x61, 0xaa, 0xe2, 0x52, 0x00, 0x4f, 0x81, 0x9f, 0x62, 0xca, 0x10, 0x4d, 0xd1, 0x17, 0x22,
	0x38, 0xba, 0x20, 0x42, 0x52, 0x9e, 0x49, 0x84, 0x15, 0x92, 0x0a, 0x0b, 0x35, 0xce, 0x9d, 0x5d,
	0xdf, 0x0c, 0x6c, 0x9d, 0x7c, 0x58, 0x68, 0x4f, 0xd3, 0xcf, 0x44, 0xf0, 0x8f, 0x0b, 0x61, 0x5b,
	0xc5, 0xa5, 0x0c, 0x9e, 0x00, 0xbf, 0x3a, 0xd6, 0x0a, 0xc3, 0x26, 0x78, 0x2a, 0x51, 0x2e, 0x88,
	0x24, 0x99, 0x72, 0x6a, 0x05, 0x2a, 0x3a, 0x5a, 0xea, 0x2a, 0x88, 0x56, 0xf5, 0x4a, 0x91, 0xfb,
	0xc3, 0x02, 0x07, 0xf1, 0x55, 0x45, 0x8f, 0x33, 0x9a, 0x4c, 0x21, 0x03, 0x35, 0x86, 0x15, 0x91,
	0xca, 0x39, 0xf7, 0xcd, 0xa0, 0xd1, 0x8a, 0xfe, 0x6f, 0x3a, 0x57, 0xe0, 0xe1, 0x5b, 0x4d, 0xee,
	0x1a, 0xd1, 0x22, 0x03, 0x26, 0xc0, 0xc2, 0x8c, 0x39, 0x44, 0x47, 0x7d, 0xd8, 0x66, 0x54, 0x9b,
	0xb1, 0xae, 0x11, 0x15, 0x74, 0x28, 0x80, 0x2d, 0x73, 0x92, 0xd0, 0x94, 0x26, 0x4e, 0xaa, 0x93,
	0xce, 0xb6, 0x99, 0x14, 0x2f, 0xd8, 0x5d, 0x23, 0xaa, 0x72, 0xdc, 0x27, 0xa0, 0x56, 0x1e, 0x16,
	0x1e, 0x83, 0xfd, 0x6c, 0x3c, 0xaa, 0xc6, 0xa5, 0x9b, 0xd8, 0x8c, 0x1a, 0xd9, 0x78, 0xb4, 0x1c,
	0x8d, 0xbb, 0x07, 0xac, 0x36, 0x63, 0xee, 0x23, 0x60, 0x2f, 0x59, 0xd0, 0x05, 0xf6, 0x9a, 0xc3,
	0x0a, 0xac, 0xa8, 0x5a, 0x77, 0x6e, 0x81, 0x66, 0xae, 0xa3, 0x51, 0x32, 0xe4, 0x34, 0x21, 0xee,
	0x1f, 0x13, 0xdc, 0xd9, 0x78, 0x0e, 0xf0, 0xe1, 0x8d, 0x6f, 0xe0, 0x5a, 0xff, 0x0f, 0x37, 0xfa,
	0xbf, 0xd6, 0xfd, 0xaf, 0x26, 0xb8, 0x7b, 0xbd, 0x6f, 0xa8, 0x8c, 0xd6, 0x8d, 0x6d, 0xb4, 0xde,
	0x6c, 0xf1, 0x22, 0xa3, 0x03, 0x79, 0xd3, 0xf6, 0xeb, 0x5d, 0xdb, 0xba, 0xbd, 0xdb, 0x71, 0xbe,
	0xcf, 0x3c, 0xf3, 0x72, 0xe6, 0x99, 0xbf, 0x67, 0x9e, 0xf9, 0x6d, 0xee, 0x19, 0x97, 0x73, 0xcf,
	0xf8, 0x39, 0xf7, 0x8c, 0x7e, 0x4d, 0x7f, 0x93, 0x9e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5b,
	0xcd, 0xbc, 0x2b, 0xcf, 0x04, 0x00, 0x00,
}

func (m *FileSystemStoragePathSourceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServableVersionsAlwaysPresent {
		i--
		if m.ServableVersionsAlwaysPresent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Servables) > 0 {
		for iNdEx := len(m.Servables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.FailIfZeroVersionsAtStartup {
		i--
		if m.FailIfZeroVersionsAtStartup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FileSystemPollWaitSeconds != 0 {
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(m.FileSystemPollWaitSeconds))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServableName) > 0 {
		i -= len(m.ServableName)
		copy(dAtA[i:], m.ServableName)
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(len(m.ServableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyChoice != nil {
		{
			size := m.PolicyChoice.Size()
			i -= size
			if _, err := m.PolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Latest != nil {
		{
			size, err := m.Latest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.All != nil {
		{
			size, err := m.All.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Specific != nil {
		{
			size, err := m.Specific.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumVersions != 0 {
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(m.NumVersions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		dAtA5 := make([]byte, len(m.Versions)*10)
		var j4 int
		for _, num1 := range m.Versions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServableVersionPolicy != nil {
		{
			size, err := m.ServableVersionPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServableName) > 0 {
		i -= len(m.ServableName)
		copy(dAtA[i:], m.ServableName)
		i = encodeVarintFileSystemStoragePathSource(dAtA, i, uint64(len(m.ServableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileSystemStoragePathSource(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileSystemStoragePathSource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileSystemStoragePathSourceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServableName)
	if l > 0 {
		n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	if m.FileSystemPollWaitSeconds != 0 {
		n += 1 + sovFileSystemStoragePathSource(uint64(m.FileSystemPollWaitSeconds))
	}
	if m.FailIfZeroVersionsAtStartup {
		n += 2
	}
	if len(m.Servables) > 0 {
		for _, e := range m.Servables {
			l = e.Size()
			n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
		}
	}
	if m.ServableVersionsAlwaysPresent {
		n += 2
	}
	return n
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyChoice != nil {
		n += m.PolicyChoice.Size()
	}
	return n
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Latest != nil {
		l = m.Latest.Size()
		n += 2 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	return n
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.All != nil {
		l = m.All.Size()
		n += 2 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	return n
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Specific != nil {
		l = m.Specific.Size()
		n += 2 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	return n
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumVersions != 0 {
		n += 1 + sovFileSystemStoragePathSource(uint64(m.NumVersions))
	}
	return n
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		l = 0
		for _, e := range m.Versions {
			l += sovFileSystemStoragePathSource(uint64(e))
		}
		n += 1 + sovFileSystemStoragePathSource(uint64(l)) + l
	}
	return n
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServableName)
	if l > 0 {
		n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	if m.ServableVersionPolicy != nil {
		l = m.ServableVersionPolicy.Size()
		n += 1 + l + sovFileSystemStoragePathSource(uint64(l))
	}
	return n
}

func sovFileSystemStoragePathSource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileSystemStoragePathSource(x uint64) (n int) {
	return sovFileSystemStoragePathSource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileSystemStoragePathSourceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSystemStoragePathSourceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSystemStoragePathSourceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSystemPollWaitSeconds", wireType)
			}
			m.FileSystemPollWaitSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSystemPollWaitSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailIfZeroVersionsAtStartup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailIfZeroVersionsAtStartup = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servables = append(m.Servables, &FileSystemStoragePathSourceConfig_ServableToMonitor{})
			if err := m.Servables[len(m.Servables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServableVersionsAlwaysPresent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServableVersionsAlwaysPresent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServableVersionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServableVersionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileSystemStoragePathSourceConfig_ServableVersionPolicy_All{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specific", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Latest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Latest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVersions", wireType)
			}
			m.NumVersions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumVersions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: All: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: All: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Specific: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Specific: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileSystemStoragePathSource
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Versions = append(m.Versions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileSystemStoragePathSource
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFileSystemStoragePathSource
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFileSystemStoragePathSource
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Versions) == 0 {
					m.Versions = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileSystemStoragePathSource
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Versions = append(m.Versions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServableToMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServableToMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServableVersionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServableVersionPolicy == nil {
				m.ServableVersionPolicy = &FileSystemStoragePathSourceConfig_ServableVersionPolicy{}
			}
			if err := m.ServableVersionPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileSystemStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileSystemStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileSystemStoragePathSource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileSystemStoragePathSource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileSystemStoragePathSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileSystemStoragePathSource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileSystemStoragePathSource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileSystemStoragePathSource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileSystemStoragePathSource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileSystemStoragePathSource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileSystemStoragePathSource = fmt.Errorf("proto: unexpected end of group")
)
