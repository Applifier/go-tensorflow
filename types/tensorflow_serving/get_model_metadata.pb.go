// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/get_model_metadata.proto

package tensorflow_serving

import (
	fmt "fmt"
	protobuf "github.com/Applifier/go-tensorflow/types/tensorflow/core/protobuf"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Message returned for "signature_def" field.
type SignatureDefMap struct {
	SignatureDef map[string]*protobuf.SignatureDef `protobuf:"bytes,1,rep,name=signature_def,json=signatureDef,proto3" json:"signature_def,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SignatureDefMap) Reset()         { *m = SignatureDefMap{} }
func (m *SignatureDefMap) String() string { return proto.CompactTextString(m) }
func (*SignatureDefMap) ProtoMessage()    {}
func (*SignatureDefMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_749024f14d1b0d4d, []int{0}
}
func (m *SignatureDefMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureDefMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureDefMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureDefMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureDefMap.Merge(m, src)
}
func (m *SignatureDefMap) XXX_Size() int {
	return m.Size()
}
func (m *SignatureDefMap) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureDefMap.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureDefMap proto.InternalMessageInfo

func (m *SignatureDefMap) GetSignatureDef() map[string]*protobuf.SignatureDef {
	if m != nil {
		return m.SignatureDef
	}
	return nil
}

type GetModelMetadataRequest struct {
	// Model Specification indicating which model we are querying for metadata.
	// If version is not specified, will use the latest (numerical) version.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
	// Metadata fields to get. Currently supported: "signature_def".
	MetadataField []string `protobuf:"bytes,2,rep,name=metadata_field,json=metadataField,proto3" json:"metadata_field,omitempty"`
}

func (m *GetModelMetadataRequest) Reset()         { *m = GetModelMetadataRequest{} }
func (m *GetModelMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*GetModelMetadataRequest) ProtoMessage()    {}
func (*GetModelMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749024f14d1b0d4d, []int{1}
}
func (m *GetModelMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModelMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModelMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModelMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModelMetadataRequest.Merge(m, src)
}
func (m *GetModelMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetModelMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModelMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetModelMetadataRequest proto.InternalMessageInfo

func (m *GetModelMetadataRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *GetModelMetadataRequest) GetMetadataField() []string {
	if m != nil {
		return m.MetadataField
	}
	return nil
}

type GetModelMetadataResponse struct {
	// Model Specification indicating which model this metadata belongs to.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
	// Map of metadata field name to metadata field. The options for metadata
	// field name are listed in GetModelMetadataRequest. Currently supported:
	// "signature_def".
	Metadata map[string]*types.Any `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetModelMetadataResponse) Reset()         { *m = GetModelMetadataResponse{} }
func (m *GetModelMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*GetModelMetadataResponse) ProtoMessage()    {}
func (*GetModelMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_749024f14d1b0d4d, []int{2}
}
func (m *GetModelMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModelMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModelMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModelMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModelMetadataResponse.Merge(m, src)
}
func (m *GetModelMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetModelMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModelMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetModelMetadataResponse proto.InternalMessageInfo

func (m *GetModelMetadataResponse) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *GetModelMetadataResponse) GetMetadata() map[string]*types.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SignatureDefMap)(nil), "tensorflow.serving.SignatureDefMap")
	proto.RegisterMapType((map[string]*protobuf.SignatureDef)(nil), "tensorflow.serving.SignatureDefMap.SignatureDefEntry")
	proto.RegisterType((*GetModelMetadataRequest)(nil), "tensorflow.serving.GetModelMetadataRequest")
	proto.RegisterType((*GetModelMetadataResponse)(nil), "tensorflow.serving.GetModelMetadataResponse")
	proto.RegisterMapType((map[string]*types.Any)(nil), "tensorflow.serving.GetModelMetadataResponse.MetadataEntry")
}

func init() {
	proto.RegisterFile("tensorflow_serving/get_model_metadata.proto", fileDescriptor_749024f14d1b0d4d)
}

var fileDescriptor_749024f14d1b0d4d = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0x6b, 0xdb, 0x30,
	0x1c, 0x8d, 0x1c, 0x36, 0x16, 0x79, 0xd9, 0x1f, 0x33, 0x98, 0xe7, 0x31, 0x63, 0x02, 0x03, 0x6f,
	0x03, 0x19, 0x3c, 0x06, 0x23, 0xec, 0xb2, 0xb1, 0xb6, 0xa7, 0x1c, 0xea, 0x40, 0xa1, 0xbd, 0x18,
	0x25, 0xfe, 0xd9, 0x0d, 0x75, 0x2c, 0xd7, 0x92, 0x53, 0x7c, 0xe9, 0xa5, 0x5f, 0xa0, 0x1f, 0x2b,
	0xc7, 0x1c, 0x7b, 0x2c, 0xc9, 0x97, 0xe8, 0xb1, 0xd8, 0x8e, 0x1b, 0xa7, 0x71, 0x4f, 0xbd, 0x49,
	0x4f, 0xef, 0xe9, 0x3d, 0xe9, 0xfd, 0xf0, 0x0f, 0x01, 0x11, 0x67, 0x89, 0x1f, 0xb2, 0x0b, 0x97,
	0x43, 0x32, 0x9b, 0x44, 0x81, 0x15, 0x80, 0x70, 0xa7, 0xcc, 0x83, 0xd0, 0x9d, 0x82, 0xa0, 0x1e,
	0x15, 0x94, 0xc4, 0x09, 0x13, 0x4c, 0x51, 0x36, 0x64, 0xb2, 0x26, 0x6b, 0x9f, 0x02, 0xc6, 0x82,
	0x10, 0xac, 0x82, 0x31, 0x4a, 0x7d, 0x8b, 0x46, 0x59, 0x49, 0xd7, 0xbe, 0x6d, 0xe8, 0xd6, 0x98,
	0x25, 0x35, 0x4e, 0x7e, 0xaf, 0x1b, 0x24, 0x34, 0x3e, 0x5d, 0x53, 0xf5, 0x86, 0x18, 0x45, 0x84,
	0xf2, 0xbc, 0x37, 0x47, 0xf8, 0xed, 0x70, 0x12, 0x44, 0x54, 0xa4, 0x09, 0xfc, 0x07, 0x7f, 0x40,
	0x63, 0xe5, 0x04, 0x77, 0x79, 0x05, 0xb9, 0x1e, 0xf8, 0x2a, 0x32, 0xda, 0xa6, 0x6c, 0xff, 0x22,
	0xbb, 0x29, 0xc9, 0x23, 0xed, 0xd6, 0x7e, 0x2f, 0x12, 0x49, 0xe6, 0xbc, 0xe6, 0x35, 0x48, 0x3b,
	0xc6, 0xef, 0x77, 0x28, 0xca, 0x3b, 0xdc, 0x3e, 0x83, 0x4c, 0x45, 0x06, 0x32, 0x3b, 0x4e, 0xbe,
	0x54, 0x08, 0x7e, 0x31, 0xa3, 0x61, 0x0a, 0xaa, 0x64, 0x20, 0x53, 0xb6, 0xd5, 0xba, 0x75, 0x5d,
	0xef, 0x94, 0xb4, 0xbe, 0xf4, 0x1b, 0xf5, 0x2e, 0xf1, 0xc7, 0x03, 0x10, 0x83, 0xfc, 0x71, 0x83,
	0xf5, 0xf7, 0x3a, 0x70, 0x9e, 0x02, 0x17, 0xca, 0x1f, 0x8c, 0xcb, 0x7f, 0xe7, 0x31, 0x8c, 0x0b,
	0x1f, 0xd9, 0xfe, 0xd2, 0xf4, 0x9c, 0x42, 0x3d, 0x8c, 0x61, 0xec, 0x74, 0xa6, 0xd5, 0x52, 0xf9,
	0x8a, 0xdf, 0x54, 0x7d, 0xb9, 0xfe, 0x04, 0x42, 0x4f, 0x95, 0x8c, 0xb6, 0xd9, 0x71, 0xba, 0x15,
	0xba, 0x9f, 0x83, 0xbd, 0x2b, 0x09, 0xab, 0xbb, 0x01, 0x78, 0xcc, 0x22, 0x0e, 0xcf, 0x4c, 0x70,
	0x84, 0x5f, 0x55, 0x5e, 0x85, 0xb7, 0x6c, 0xf7, 0x9b, 0xb4, 0x4f, 0xb9, 0x93, 0x0a, 0x28, 0x1b,
	0x79, 0xb8, 0x4b, 0x3b, 0xc4, 0xdd, 0xad, 0xa3, 0x86, 0x26, 0xbe, 0x6f, 0x37, 0xf1, 0x81, 0x94,
	0x63, 0x49, 0xaa, 0x91, 0x23, 0x7f, 0xa3, 0xac, 0xd6, 0xc2, 0xbf, 0xcf, 0xf3, 0xa5, 0x8e, 0x16,
	0x4b, 0x1d, 0xdd, 0x2e, 0x75, 0x74, 0xbd, 0xd2, 0x5b, 0x8b, 0x95, 0xde, 0xba, 0x59, 0xe9, 0xad,
	0x3b, 0x84, 0x46, 0x2f, 0x0b, 0xd5, 0xcf, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x92, 0xa4,
	0xb4, 0x1d, 0x03, 0x00, 0x00,
}

func (m *SignatureDefMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureDefMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SignatureDef) > 0 {
		for k, _ := range m.SignatureDef {
			dAtA[i] = 0xa
			i++
			v := m.SignatureDef[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGetModelMetadata(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGetModelMetadata(uint64(len(k))) + msgSize
			i = encodeVarintGetModelMetadata(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGetModelMetadata(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGetModelMetadata(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *GetModelMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModelSpec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetModelMetadata(dAtA, i, uint64(m.ModelSpec.Size()))
		n2, err := m.ModelSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.MetadataField) > 0 {
		for _, s := range m.MetadataField {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetModelMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModelSpec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetModelMetadata(dAtA, i, uint64(m.ModelSpec.Size()))
		n3, err := m.ModelSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x12
			i++
			v := m.Metadata[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGetModelMetadata(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGetModelMetadata(uint64(len(k))) + msgSize
			i = encodeVarintGetModelMetadata(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGetModelMetadata(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGetModelMetadata(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func encodeVarintGetModelMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignatureDefMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureDef) > 0 {
		for k, v := range m.SignatureDef {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGetModelMetadata(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGetModelMetadata(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGetModelMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetModelMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovGetModelMetadata(uint64(l))
	}
	if len(m.MetadataField) > 0 {
		for _, s := range m.MetadataField {
			l = len(s)
			n += 1 + l + sovGetModelMetadata(uint64(l))
		}
	}
	return n
}

func (m *GetModelMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovGetModelMetadata(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGetModelMetadata(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGetModelMetadata(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGetModelMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGetModelMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGetModelMetadata(x uint64) (n int) {
	return sovGetModelMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureDefMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetModelMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureDefMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureDefMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureDef == nil {
				m.SignatureDef = make(map[string]*protobuf.SignatureDef)
			}
			var mapkey string
			var mapvalue *protobuf.SignatureDef
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetModelMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetModelMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetModelMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &protobuf.SignatureDef{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGetModelMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SignatureDef[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetModelMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetModelMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataField = append(m.MetadataField, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetModelMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetModelMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetModelMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetModelMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetModelMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGetModelMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGetModelMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetModelMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetModelMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetModelMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetModelMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetModelMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGetModelMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetModelMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetModelMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetModelMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetModelMetadata   = fmt.Errorf("proto: integer overflow")
)
