// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/static_storage_path_source.proto

package tensorflow_serving

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Config proto for StaticStoragePathSource.
type StaticStoragePathSourceConfig struct {
	// The single servable name, version number and path to supply statically.
	ServableName string `protobuf:"bytes,1,opt,name=servable_name,json=servableName,proto3" json:"servable_name,omitempty"`
	VersionNum   int64  `protobuf:"varint,2,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"`
	VersionPath  string `protobuf:"bytes,3,opt,name=version_path,json=versionPath,proto3" json:"version_path,omitempty"`
}

func (m *StaticStoragePathSourceConfig) Reset()         { *m = StaticStoragePathSourceConfig{} }
func (m *StaticStoragePathSourceConfig) String() string { return proto.CompactTextString(m) }
func (*StaticStoragePathSourceConfig) ProtoMessage()    {}
func (*StaticStoragePathSourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorStaticStoragePathSource, []int{0}
}

func (m *StaticStoragePathSourceConfig) GetServableName() string {
	if m != nil {
		return m.ServableName
	}
	return ""
}

func (m *StaticStoragePathSourceConfig) GetVersionNum() int64 {
	if m != nil {
		return m.VersionNum
	}
	return 0
}

func (m *StaticStoragePathSourceConfig) GetVersionPath() string {
	if m != nil {
		return m.VersionPath
	}
	return ""
}

func init() {
	proto.RegisterType((*StaticStoragePathSourceConfig)(nil), "tensorflow.serving.StaticStoragePathSourceConfig")
}
func (m *StaticStoragePathSourceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticStoragePathSourceConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServableName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStaticStoragePathSource(dAtA, i, uint64(len(m.ServableName)))
		i += copy(dAtA[i:], m.ServableName)
	}
	if m.VersionNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStaticStoragePathSource(dAtA, i, uint64(m.VersionNum))
	}
	if len(m.VersionPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStaticStoragePathSource(dAtA, i, uint64(len(m.VersionPath)))
		i += copy(dAtA[i:], m.VersionPath)
	}
	return i, nil
}

func encodeVarintStaticStoragePathSource(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StaticStoragePathSourceConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServableName)
	if l > 0 {
		n += 1 + l + sovStaticStoragePathSource(uint64(l))
	}
	if m.VersionNum != 0 {
		n += 1 + sovStaticStoragePathSource(uint64(m.VersionNum))
	}
	l = len(m.VersionPath)
	if l > 0 {
		n += 1 + l + sovStaticStoragePathSource(uint64(l))
	}
	return n
}

func sovStaticStoragePathSource(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStaticStoragePathSource(x uint64) (n int) {
	return sovStaticStoragePathSource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StaticStoragePathSourceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaticStoragePathSource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticStoragePathSourceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticStoragePathSourceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaticStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaticStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNum", wireType)
			}
			m.VersionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaticStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaticStoragePathSource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaticStoragePathSource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaticStoragePathSource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaticStoragePathSource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaticStoragePathSource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaticStoragePathSource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaticStoragePathSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaticStoragePathSource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStaticStoragePathSource
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStaticStoragePathSource
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStaticStoragePathSource(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStaticStoragePathSource = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaticStoragePathSource   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tensorflow_serving/static_storage_path_source.proto", fileDescriptorStaticStoragePathSource)
}

var fileDescriptorStaticStoragePathSource = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2e, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc, 0x4b, 0xd7, 0x2f,
	0x2e, 0x49, 0x2c, 0xc9, 0x4c, 0x8e, 0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0x8d, 0x2f, 0x48,
	0x2c, 0xc9, 0x88, 0x2f, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x42, 0x68, 0xd2, 0x83, 0x6a, 0x52, 0xea, 0x60, 0xe4, 0x92, 0x0d, 0x06, 0x6b, 0x0c, 0x86,
	0xe8, 0x0b, 0x48, 0x2c, 0xc9, 0x08, 0x06, 0xeb, 0x72, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x17, 0x52,
	0xe6, 0xe2, 0x05, 0x29, 0x4e, 0x4c, 0xca, 0x49, 0x8d, 0xcf, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x81, 0x09, 0xfa, 0x25, 0xe6, 0xa6, 0x0a, 0xc9, 0x73, 0x71, 0x97,
	0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0xc5, 0xe7, 0x95, 0xe6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x30,
	0x07, 0x71, 0x41, 0x85, 0xfc, 0x4a, 0x73, 0x85, 0x14, 0xb9, 0x78, 0x60, 0x0a, 0x40, 0x0e, 0x93,
	0x60, 0x06, 0x1b, 0x02, 0xd3, 0x04, 0xb2, 0xd4, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x6e, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x1c, 0xa7, 0x1b, 0xee, 0x00, 0x00, 0x00,
}
