// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/session_service.proto

package tensorflow_serving

import (
	context "context"
	fmt "fmt"
	core "github.com/Applifier/go-tensorflow/types/tensorflow/core"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionRunRequest struct {
	// Model Specification. If version is not specified, will use the latest
	// (numerical) version.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
	// Tensors to be fed in the step. Each feed is a named tensor.
	Feed []*core.NamedTensorProto `protobuf:"bytes,2,rep,name=feed,proto3" json:"feed,omitempty"`
	// Fetches. A list of tensor names. The caller expects a tensor to
	// be returned for each fetch[i] (see RunResponse.tensor). The
	// order of specified fetches does not change the execution order.
	Fetch []string `protobuf:"bytes,3,rep,name=fetch,proto3" json:"fetch,omitempty"`
	// Target Nodes. A list of node names. The named nodes will be run
	// to but their outputs will not be fetched.
	Target []string `protobuf:"bytes,4,rep,name=target,proto3" json:"target,omitempty"`
	// Options for the run call. **Currently ignored.**
	Options *core.RunOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *SessionRunRequest) Reset()         { *m = SessionRunRequest{} }
func (m *SessionRunRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRunRequest) ProtoMessage()    {}
func (*SessionRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8e31ebd048a15d, []int{0}
}
func (m *SessionRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRunRequest.Merge(m, src)
}
func (m *SessionRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRunRequest proto.InternalMessageInfo

func (m *SessionRunRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *SessionRunRequest) GetFeed() []*core.NamedTensorProto {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *SessionRunRequest) GetFetch() []string {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *SessionRunRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SessionRunRequest) GetOptions() *core.RunOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type SessionRunResponse struct {
	// Effective Model Specification used for session run.
	ModelSpec *ModelSpec `protobuf:"bytes,3,opt,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
	// NOTE: The order of the returned tensors may or may not match
	// the fetch order specified in RunRequest.
	Tensor []*core.NamedTensorProto `protobuf:"bytes,1,rep,name=tensor,proto3" json:"tensor,omitempty"`
	// Returned metadata if requested in the options.
	Metadata *core.RunMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SessionRunResponse) Reset()         { *m = SessionRunResponse{} }
func (m *SessionRunResponse) String() string { return proto.CompactTextString(m) }
func (*SessionRunResponse) ProtoMessage()    {}
func (*SessionRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8e31ebd048a15d, []int{1}
}
func (m *SessionRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRunResponse.Merge(m, src)
}
func (m *SessionRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRunResponse proto.InternalMessageInfo

func (m *SessionRunResponse) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *SessionRunResponse) GetTensor() []*core.NamedTensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SessionRunResponse) GetMetadata() *core.RunMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionRunRequest)(nil), "tensorflow.serving.SessionRunRequest")
	proto.RegisterType((*SessionRunResponse)(nil), "tensorflow.serving.SessionRunResponse")
}

func init() {
	proto.RegisterFile("tensorflow_serving/session_service.proto", fileDescriptor_1d8e31ebd048a15d)
}

var fileDescriptor_1d8e31ebd048a15d = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x18, 0x85, 0x19, 0x0a, 0xdc, 0xcb, 0x90, 0xdc, 0xe4, 0x4e, 0x6e, 0xb8, 0x0d, 0x6a, 0x43, 0x48,
	0x30, 0x4d, 0x4c, 0x5a, 0x02, 0x2e, 0x5d, 0xb9, 0x47, 0xcd, 0xe0, 0xce, 0x05, 0x29, 0xed, 0x5f,
	0x6c, 0x42, 0x67, 0x6a, 0x67, 0xaa, 0xaf, 0xe1, 0x0b, 0xb9, 0x77, 0xc9, 0xd2, 0xa5, 0xa1, 0x2f,
	0xe1, 0xd2, 0x30, 0x53, 0x84, 0x00, 0x46, 0xdd, 0xf5, 0x9f, 0xf3, 0xfd, 0x39, 0xe7, 0x74, 0x06,
	0xdb, 0x12, 0x98, 0xe0, 0x69, 0x38, 0xe3, 0x0f, 0x63, 0x01, 0xe9, 0x7d, 0xc4, 0xa6, 0xae, 0x00,
	0x21, 0x22, 0xce, 0xf4, 0xec, 0x83, 0x93, 0xa4, 0x5c, 0x72, 0x42, 0xd6, 0xa4, 0x53, 0x90, 0x2d,
	0x6b, 0xcf, 0x76, 0xcc, 0x03, 0x98, 0xe9, 0x9d, 0x56, 0x77, 0xad, 0xbb, 0x3e, 0x4f, 0xc1, 0x55,
	0xc7, 0x93, 0x2c, 0x74, 0x7d, 0xce, 0xc2, 0x68, 0x5a, 0x60, 0x27, 0x9f, 0x62, 0xcc, 0x8b, 0x21,
	0x18, 0x6b, 0x59, 0xc3, 0x9d, 0x1c, 0xe1, 0xbf, 0x23, 0x9d, 0x90, 0x66, 0x8c, 0xc2, 0x5d, 0x06,
	0x42, 0x92, 0x33, 0x8c, 0x95, 0xf1, 0x58, 0x24, 0xe0, 0x9b, 0xa8, 0x8d, 0xec, 0x46, 0xff, 0xc8,
	0xd9, 0x8d, 0xec, 0x0c, 0x97, 0xd4, 0x28, 0x01, 0x9f, 0xd6, 0xe3, 0xd5, 0x27, 0xe9, 0xe1, 0x4a,
	0x08, 0x10, 0x98, 0xe5, 0xb6, 0x61, 0x37, 0xfa, 0x87, 0x9b, 0x7b, 0x17, 0xcb, 0x04, 0xd7, 0x6a,
	0xbe, 0x5a, 0xfa, 0x53, 0x45, 0x92, 0x7f, 0xb8, 0x1a, 0x82, 0xf4, 0x6f, 0x4d, 0xa3, 0x6d, 0xd8,
	0x75, 0xaa, 0x07, 0xd2, 0xc4, 0x35, 0xe9, 0xa5, 0x53, 0x90, 0x66, 0x45, 0x1d, 0x17, 0x13, 0xe9,
	0xe1, 0x5f, 0x3c, 0x91, 0x11, 0x67, 0xc2, 0xac, 0xaa, 0x68, 0xcd, 0x4d, 0x0b, 0x9a, 0xb1, 0x4b,
	0xad, 0xd2, 0x15, 0xd6, 0x79, 0x42, 0x98, 0x6c, 0xb6, 0x14, 0x09, 0x67, 0x02, 0xb6, 0x6a, 0x1a,
	0x3f, 0xac, 0x79, 0x8a, 0x6b, 0x1a, 0x35, 0xd1, 0x37, 0x8a, 0x16, 0x2c, 0x19, 0xe0, 0xdf, 0x31,
	0x48, 0x2f, 0xf0, 0xa4, 0x67, 0x96, 0x95, 0xe3, 0xff, 0xad, 0xf4, 0xc3, 0x42, 0xa6, 0x1f, 0x60,
	0x3f, 0xc6, 0x7f, 0x8a, 0xf8, 0x23, 0xfd, 0x8a, 0xc8, 0x0d, 0xc6, 0xeb, 0x42, 0xa4, 0xbb, 0x2f,
	0xf4, 0xce, 0xb5, 0xb6, 0x8e, 0xbf, 0xc2, 0xf4, 0x7f, 0x39, 0x3f, 0x78, 0x5e, 0x58, 0x68, 0xbe,
	0xb0, 0xd0, 0xeb, 0xc2, 0x42, 0x8f, 0xb9, 0x55, 0x9a, 0xe7, 0x56, 0xe9, 0x25, 0xb7, 0x4a, 0x6f,
	0x08, 0x4d, 0x6a, 0xea, 0xe1, 0x0c, 0xde, 0x03, 0x00, 0x00, 0xff, 0xff, 0x34, 0x32, 0x83, 0xb1,
	0xec, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	// Runs inference of a given model.
	SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error) {
	out := new(SessionRunResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.serving.SessionService/SessionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	// Runs inference of a given model.
	SessionRun(context.Context, *SessionRunRequest) (*SessionRunResponse, error)
}

// UnimplementedSessionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (*UnimplementedSessionServiceServer) SessionRun(ctx context.Context, req *SessionRunRequest) (*SessionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRun not implemented")
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_SessionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SessionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.serving.SessionService/SessionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SessionRun(ctx, req.(*SessionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.serving.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionRun",
			Handler:    _SessionService_SessionRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow_serving/session_service.proto",
}

func (m *SessionRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Target) > 0 {
		for iNdEx := len(m.Target) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Target[iNdEx])
			copy(dAtA[i:], m.Target[iNdEx])
			i = encodeVarintSessionService(dAtA, i, uint64(len(m.Target[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Fetch) > 0 {
		for iNdEx := len(m.Fetch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fetch[iNdEx])
			copy(dAtA[i:], m.Fetch[iNdEx])
			i = encodeVarintSessionService(dAtA, i, uint64(len(m.Fetch[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Feed) > 0 {
		for iNdEx := len(m.Feed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ModelSpec != nil {
		{
			size, err := m.ModelSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModelSpec != nil {
		{
			size, err := m.ModelSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tensor) > 0 {
		for iNdEx := len(m.Tensor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tensor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	if len(m.Feed) > 0 {
		for _, e := range m.Feed {
			l = e.Size()
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			l = len(s)
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			l = len(s)
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	return n
}

func (m *SessionRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	return n
}

func sovSessionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionService(x uint64) (n int) {
	return sovSessionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feed = append(m.Feed, &core.NamedTensorProto{})
			if err := m.Feed[len(m.Feed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &core.RunOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &core.NamedTensorProto{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &core.RunMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionService = fmt.Errorf("proto: unexpected end of group")
)
