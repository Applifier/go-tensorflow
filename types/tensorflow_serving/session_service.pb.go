// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/session_service.proto

package tensorflow_serving

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow21 "github.com/Applifier/go-tensorflow/types/tensorflow/core/protobuf"
import tensorflow22 "github.com/Applifier/go-tensorflow/types/tensorflow/core/protobuf"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SessionRunRequest struct {
	// Model Specification. If version is not specified, will use the latest
	// (numerical) version.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Tensors to be fed in the step. Each feed is a named tensor.
	Feed []*tensorflow22.NamedTensorProto `protobuf:"bytes,2,rep,name=feed" json:"feed,omitempty"`
	// Fetches. A list of tensor names. The caller expects a tensor to
	// be returned for each fetch[i] (see RunResponse.tensor). The
	// order of specified fetches does not change the execution order.
	Fetch []string `protobuf:"bytes,3,rep,name=fetch" json:"fetch,omitempty"`
	// Target Nodes. A list of node names. The named nodes will be run
	// to but their outputs will not be fetched.
	Target []string `protobuf:"bytes,4,rep,name=target" json:"target,omitempty"`
	// Options for the run call. **Currently ignored.**
	Options *tensorflow21.RunOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *SessionRunRequest) Reset()                    { *m = SessionRunRequest{} }
func (m *SessionRunRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionRunRequest) ProtoMessage()               {}
func (*SessionRunRequest) Descriptor() ([]byte, []int) { return fileDescriptorSessionService, []int{0} }

func (m *SessionRunRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *SessionRunRequest) GetFeed() []*tensorflow22.NamedTensorProto {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *SessionRunRequest) GetFetch() []string {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *SessionRunRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SessionRunRequest) GetOptions() *tensorflow21.RunOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type SessionRunResponse struct {
	// NOTE: The order of the returned tensors may or may not match
	// the fetch order specified in RunRequest.
	Tensor []*tensorflow22.NamedTensorProto `protobuf:"bytes,1,rep,name=tensor" json:"tensor,omitempty"`
	// Returned metadata if requested in the options.
	Metadata *tensorflow21.RunMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *SessionRunResponse) Reset()                    { *m = SessionRunResponse{} }
func (m *SessionRunResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionRunResponse) ProtoMessage()               {}
func (*SessionRunResponse) Descriptor() ([]byte, []int) { return fileDescriptorSessionService, []int{1} }

func (m *SessionRunResponse) GetTensor() []*tensorflow22.NamedTensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SessionRunResponse) GetMetadata() *tensorflow21.RunMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionRunRequest)(nil), "tensorflow.serving.SessionRunRequest")
	proto.RegisterType((*SessionRunResponse)(nil), "tensorflow.serving.SessionRunResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SessionService service

type SessionServiceClient interface {
	// Runs inference of a given model.
	SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error) {
	out := new(SessionRunResponse)
	err := grpc.Invoke(ctx, "/tensorflow.serving.SessionService/SessionRun", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionService service

type SessionServiceServer interface {
	// Runs inference of a given model.
	SessionRun(context.Context, *SessionRunRequest) (*SessionRunResponse, error)
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_SessionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SessionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.serving.SessionService/SessionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SessionRun(ctx, req.(*SessionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.serving.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionRun",
			Handler:    _SessionService_SessionRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow_serving/session_service.proto",
}

func (m *SessionRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRunRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModelSpec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSessionService(dAtA, i, uint64(m.ModelSpec.Size()))
		n1, err := m.ModelSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Feed) > 0 {
		for _, msg := range m.Feed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSessionService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Options != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSessionService(dAtA, i, uint64(m.Options.Size()))
		n2, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SessionRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRunResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, msg := range m.Tensor {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSessionService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSessionService(dAtA, i, uint64(m.Metadata.Size()))
		n3, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintSessionService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SessionRunRequest) Size() (n int) {
	var l int
	_ = l
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	if len(m.Feed) > 0 {
		for _, e := range m.Feed {
			l = e.Size()
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			l = len(s)
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			l = len(s)
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	return n
}

func (m *SessionRunResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovSessionService(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSessionService(uint64(l))
	}
	return n
}

func sovSessionService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSessionService(x uint64) (n int) {
	return sovSessionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feed = append(m.Feed, &tensorflow22.NamedTensorProto{})
			if err := m.Feed[len(m.Feed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &tensorflow21.RunOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &tensorflow22.NamedTensorProto{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &tensorflow21.RunMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSessionService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSessionService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSessionService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSessionService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("tensorflow_serving/session_service.proto", fileDescriptorSessionService)
}

var fileDescriptorSessionService = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0xef, 0xf4, 0xdf, 0xbd, 0x3d, 0x85, 0x0b, 0x8e, 0x52, 0x43, 0xd1, 0x50, 0x0a, 0x95,
	0x80, 0x90, 0x94, 0xd6, 0xa5, 0x2b, 0xf7, 0x55, 0x99, 0xba, 0x73, 0x51, 0xd2, 0xe4, 0xa4, 0x06,
	0x9a, 0x99, 0x98, 0x99, 0xe8, 0xd2, 0x57, 0xf0, 0xb1, 0x5c, 0xfa, 0x08, 0xd2, 0xbe, 0x84, 0x4b,
	0xe9, 0x4c, 0x6a, 0x8b, 0xad, 0xe8, 0x2e, 0x67, 0xbe, 0xdf, 0xc7, 0xf7, 0x4d, 0xce, 0x80, 0xa3,
	0x90, 0x4b, 0x91, 0x45, 0x33, 0xf1, 0x38, 0x96, 0x98, 0x3d, 0xc4, 0x7c, 0xea, 0x49, 0x94, 0x32,
	0x16, 0xdc, 0xcc, 0x01, 0xba, 0x69, 0x26, 0x94, 0xa0, 0x74, 0x4d, 0xba, 0x05, 0xd9, 0xb2, 0x77,
	0xb8, 0x13, 0x11, 0xe2, 0xcc, 0x78, 0x5a, 0xdd, 0xb5, 0xee, 0x05, 0x22, 0x43, 0x4f, 0x1f, 0x4f,
	0xf2, 0xc8, 0x0b, 0x04, 0x8f, 0xe2, 0x69, 0x81, 0x9d, 0x7e, 0x8b, 0x71, 0x3f, 0xc1, 0x70, 0x6c,
	0x64, 0x03, 0x77, 0x16, 0x04, 0xf6, 0x46, 0xa6, 0x21, 0xcb, 0x39, 0xc3, 0xfb, 0x1c, 0xa5, 0xa2,
	0xe7, 0x00, 0x3a, 0x78, 0x2c, 0x53, 0x0c, 0x2c, 0xd2, 0x26, 0x4e, 0xa3, 0x7f, 0xec, 0x6e, 0x57,
	0x76, 0x87, 0x4b, 0x6a, 0x94, 0x62, 0xc0, 0xea, 0xc9, 0xea, 0x93, 0xf6, 0xa0, 0x12, 0x21, 0x86,
	0x56, 0xa9, 0x5d, 0x76, 0x1a, 0xfd, 0xa3, 0x4d, 0xdf, 0xe5, 0xb2, 0xc1, 0x8d, 0x9e, 0xaf, 0x97,
	0xf9, 0x4c, 0x93, 0xf4, 0x00, 0xaa, 0x11, 0xaa, 0xe0, 0xce, 0x2a, 0xb7, 0xcb, 0x4e, 0x9d, 0x99,
	0x81, 0x36, 0xa1, 0xa6, 0xfc, 0x6c, 0x8a, 0xca, 0xaa, 0xe8, 0xe3, 0x62, 0xa2, 0x3d, 0xf8, 0x2b,
	0x52, 0x15, 0x0b, 0x2e, 0xad, 0xaa, 0xae, 0xd6, 0xdc, 0x8c, 0x60, 0x39, 0xbf, 0x32, 0x2a, 0x5b,
	0x61, 0x9d, 0x27, 0xa0, 0x9b, 0x97, 0x94, 0xa9, 0xe0, 0x12, 0xe9, 0x19, 0xd4, 0x8c, 0xcf, 0x22,
	0xbf, 0x68, 0x5a, 0xb0, 0x74, 0x00, 0xff, 0x12, 0x54, 0x7e, 0xe8, 0x2b, 0xdf, 0x2a, 0xe9, 0xf8,
	0xc3, 0x2f, 0xf1, 0xc3, 0x42, 0x66, 0x9f, 0x60, 0x3f, 0x81, 0xff, 0x45, 0x81, 0x91, 0x79, 0x06,
	0xf4, 0x16, 0x60, 0x5d, 0x89, 0x76, 0x77, 0xfd, 0xdc, 0xad, 0xbd, 0xb4, 0x4e, 0x7e, 0xc2, 0xcc,
	0xcd, 0x2e, 0xf6, 0x5f, 0xe6, 0x36, 0x79, 0x9d, 0xdb, 0xe4, 0x6d, 0x6e, 0x93, 0xe7, 0x85, 0xfd,
	0xe7, 0x9d, 0x90, 0x49, 0x4d, 0x6f, 0x7c, 0xf0, 0x11, 0x00, 0x00, 0xff, 0xff, 0x55, 0xcb, 0xa0,
	0x98, 0xa5, 0x02, 0x00, 0x00,
}
