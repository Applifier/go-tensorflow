// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/ssl_config.proto

package tensorflow_serving

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for a secure gRPC channel
type SSLConfig struct {
	// private server key for SSL
	ServerKey string `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	// public server certificate
	ServerCert string `protobuf:"bytes,2,opt,name=server_cert,json=serverCert,proto3" json:"server_cert,omitempty"`
	//  custom certificate authority
	CustomCa string `protobuf:"bytes,3,opt,name=custom_ca,json=customCa,proto3" json:"custom_ca,omitempty"`
	// valid client certificate required ?
	ClientVerify bool `protobuf:"varint,4,opt,name=client_verify,json=clientVerify,proto3" json:"client_verify,omitempty"`
}

func (m *SSLConfig) Reset()         { *m = SSLConfig{} }
func (m *SSLConfig) String() string { return proto.CompactTextString(m) }
func (*SSLConfig) ProtoMessage()    {}
func (*SSLConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c8608c2ec7589f, []int{0}
}
func (m *SSLConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSLConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSLConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSLConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSLConfig.Merge(m, src)
}
func (m *SSLConfig) XXX_Size() int {
	return m.Size()
}
func (m *SSLConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SSLConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SSLConfig proto.InternalMessageInfo

func (m *SSLConfig) GetServerKey() string {
	if m != nil {
		return m.ServerKey
	}
	return ""
}

func (m *SSLConfig) GetServerCert() string {
	if m != nil {
		return m.ServerCert
	}
	return ""
}

func (m *SSLConfig) GetCustomCa() string {
	if m != nil {
		return m.CustomCa
	}
	return ""
}

func (m *SSLConfig) GetClientVerify() bool {
	if m != nil {
		return m.ClientVerify
	}
	return false
}

func init() {
	proto.RegisterType((*SSLConfig)(nil), "tensorflow.serving.SSLConfig")
}

func init() {
	proto.RegisterFile("tensorflow_serving/ssl_config.proto", fileDescriptor_d0c8608c2ec7589f)
}

var fileDescriptor_d0c8608c2ec7589f = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc, 0x4b, 0xd7, 0x2f,
	0x2e, 0xce, 0x89, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x42, 0x28, 0xd2, 0x83, 0x2a, 0x52, 0xea, 0x65, 0xe4, 0xe2, 0x0c, 0x0e, 0xf6, 0x71, 0x06,
	0xab, 0x13, 0x92, 0xe5, 0xe2, 0x02, 0x49, 0xa4, 0x16, 0xc5, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x71, 0x42, 0x44, 0xbc, 0x53, 0x2b, 0x85, 0xe4, 0xb9, 0xb8, 0xa1, 0xd2,
	0xc9, 0xa9, 0x45, 0x25, 0x12, 0x4c, 0x60, 0x79, 0xa8, 0x0e, 0xe7, 0xd4, 0xa2, 0x12, 0x21, 0x69,
	0x2e, 0xce, 0xe4, 0xd2, 0xe2, 0x92, 0xfc, 0xdc, 0xf8, 0xe4, 0x44, 0x09, 0x66, 0xb0, 0x34, 0x07,
	0x44, 0xc0, 0x39, 0x51, 0x48, 0x99, 0x8b, 0x37, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x24, 0xbe, 0x2c,
	0xb5, 0x28, 0x33, 0xad, 0x52, 0x82, 0x45, 0x81, 0x51, 0x83, 0x23, 0x88, 0x07, 0x22, 0x18, 0x06,
	0x16, 0x73, 0x92, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x1f, 0x8c, 0x8c,
	0x49, 0x6c, 0x60, 0x7f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x94, 0x82, 0xa0, 0xee,
	0x00, 0x00, 0x00,
}

func (m *SSLConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSLConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSLConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientVerify {
		i--
		if m.ClientVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CustomCa) > 0 {
		i -= len(m.CustomCa)
		copy(dAtA[i:], m.CustomCa)
		i = encodeVarintSslConfig(dAtA, i, uint64(len(m.CustomCa)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerCert) > 0 {
		i -= len(m.ServerCert)
		copy(dAtA[i:], m.ServerCert)
		i = encodeVarintSslConfig(dAtA, i, uint64(len(m.ServerCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerKey) > 0 {
		i -= len(m.ServerKey)
		copy(dAtA[i:], m.ServerKey)
		i = encodeVarintSslConfig(dAtA, i, uint64(len(m.ServerKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSslConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovSslConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SSLConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerKey)
	if l > 0 {
		n += 1 + l + sovSslConfig(uint64(l))
	}
	l = len(m.ServerCert)
	if l > 0 {
		n += 1 + l + sovSslConfig(uint64(l))
	}
	l = len(m.CustomCa)
	if l > 0 {
		n += 1 + l + sovSslConfig(uint64(l))
	}
	if m.ClientVerify {
		n += 2
	}
	return n
}

func sovSslConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSslConfig(x uint64) (n int) {
	return sovSslConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SSLConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSslConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSLConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSLConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSslConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSslConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSslConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSslConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSslConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSslConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomCa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientVerify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSslConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSslConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSslConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSslConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSslConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSslConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSslConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSslConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSslConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSslConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSslConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSslConfig = fmt.Errorf("proto: unexpected end of group")
)
